<다중 스레드를 사용한 도형 관리 프로그램 설계 및 구현>

여러 스레드가 동시에 도형을 추가하고 삭제할 수 있으며, 
동기화를 위해 std::shared_mutex를 사용한다. 이를 통해 여러 스레드가
도형 정보를 읽고 쓰는 상황을 안전하게 처리할 수 있다.

-이벤트 기반의 아키텍처의 사용
  도형의 추가와 제거와 같은 상태 변화를 EventBus를 통해 이벤트로 발행한다.
  상태변화를 독립적으로 처리할 수 있으며, 새로운 이벤트 핸들러를 쉽게 추가할 수 있다.
-싱글톤 패턴의 EventBus
  애플리케이션 내에서 이벤트 관리의 일관성을 유지하기 위해 EventBus를 싱글톤으로 설계
  어디서나 같은 EventBus인스턴스를 사용하여 이벤트를 발행하고 구독할 수 있다.
-핸들러의 구독
  main()함수에서 프로그램이 시작될 때 이벤트 핸들러를 EventBus에 구독한다.
  도형이 추가되거나 제거될 때 마다 적절한 핸들러가 호출되어 이벤트를 처리할 수 있다.
-도형관리의 분리
  ShapeManager클래스는 도형의 추가, 제거, 출력 기능을 캡슐화하여 제공한다.
  도형이 추가되거나 제거될 때마다 EventBus를 통해 이벤트를 발행하여 다른 컴포넌트들이
  이 변화를 처리할 수 있도록 한다.
-싱글톤(Singleton)
  객체지향프로그램에서 사용되는 디자인 패턴 중 하나로, 클래스의 인스턴스가 오직 하나만
  생성됨을 보장하는 패턴이다. 싱글톤 패턴을 사용하면 특정 클래스에 대해 단 하나의 객체만
  존재하도록 하여, 이 객체를 전역적으로 접근할 수 있게 된다.
  (주의) 전역 상태를 공유하기 때문에 잘못된 사용 시의 의도치않은 부작용이 발생할 수 있다.
  -시스템 내에서 하나의 인스턴스만 필요한 경우(예: 설정클래스, 로그 관리 클래스 등)
  -공유 자원을 관리해야 하는 경우(예: 스레드 풀, 데이터베이스 연결 풀 등)
  -구현방법
  1) 정적변수와 정적 메서드 사용
  클래스 내에 인스턴스를 저장할 정적변수 선언 
  외부에서 객체를 생성하지 못하도록 생성자를 private로 선언
  인스턴스를 반환하는 정적메서드를 제공
  2) 이론 초기화(Eager Initialization)
  - 클래스가 로드될 때 인스턴스를 생성한다.
  - 멀티스레드환경에서도 안전하다
  3) 이중검사잠금(Double-Checked Locking)
  - 멀티스레드환경에서 성능을 고려한 방법으로 인스턴스가 생성된 후에는 동기화 비용이
  발생하지 않도록 한다.

<동작요약>
1. main.cpp
EventBus::getInstace().subscribe(onShapeAdded);
이벤트 버스의 싱글톤 인스턴스를 얻어와서 onShapeAdded함수를 구독자로 등록한다.
이 함수는 도형이 추가될 때 호출될 콜백 함수이다.
2. EventBus.cpp
subscribers.push_back(onShapeAdded);
구독자 벡터에 onShapeAdded함수를 추가한다. 
이 함수는 도형이 추가될 때 호출된 콜백 함수이다.
3. main.cpp
manager.addShape(std::make_unique<Rectangle>(10, 5, "blue"));
도형을 관리하는 매니저 객체에 새로운 직사각형을 추가한다.
4.ShapeManager.cpp
shapes_.push_back(std::move(shape));
매니저가 관리하는 도형 벡터에 새로운 도형을 추가한다.
EventBus::getInstance().publish(ShapeAddedEvent(shapes_.back()-<name()));
도형이 추가된 후에 해당 도형의 이름을 포함한 ShapeAddedEvent를 발행한다.
5.ShapeAddedEvent
ShapeAddedEvent(const std::string& name) : shapeName(name {
	std::cout << tostring() << std::endl; 
}
도형 이름을 받아서 초기화하고, 초기화된 도형 이름을 출력한다.
!!도형이름을 출력하는 로직을 넣었지만 도형 추가 후 동작할 로직을 넣어주면 된다.

1) Event.h
모든 이벤트의 기본 클래스이다. 이 클래스를 상속하여 다양한 이벤트를 정의할 수 있다.
가상 소멸자를 가지고 있으며, 이를 통해 다양한 이벤트 클래스가 이 클래스를 상속받을 수
있다.
2) EventBus.h
이벤트를 관리하고 이벤트가 발생할 때 구독자에게 알리는 역할을 한다.
싱글톤 패턴을 사용하여 프로그램 내에서 하나의 인스턴스만 존재하도록 한다.
getInstance메서드는 싱글톤 인스턴스를 반환한다.
subscribe메서드는 이벤트를 구독하는 콜백함수를 등록한다.
publish메서드는 등록된 모든 콜백 함수에 이벤트를 게시한다.
3) EventBus.cpp
EventBus 클래스 메서드 구현
4) EventClasses.h
이벤트를 정의한다.
ShapeAddedEvent, ShapeRemovedEvent
5) Eventhandler.h
이벤트 핸들러 함수들을 선언
onShapeAdded, onShapeRemoved
6) EventHandler.cpp
이벤트 핸들러 함수 구현
7) Circle.h
원형 도형 클래스 정의
Shape클래스를 상속받아 원형 도형의 구체적인 정의
8) Circle.cpp
원형 도형 클래스의 메서드를 구현
9) Rectangle.h
Shape클래스를 상속받아 사각형 도형의 구체적인 정의
10) Rectangle.cpp
사각형 도형 클래스의 메서드를 구현
11) Shape.h
도형의 추상화. 추상클래스.
공통된 인터페이스를 제공하여 도형의 특징을 사용하는 코드를 일반화 할 수 있다.
다른 종류의 도형 클래스들이 이를 상속하여 구체화한다. 
순수 가상 함수로 이루어져 이써서 객체를 직접 생성 할 수 없고,
파생된 클래스에서 이를 구현해야 한다. 
-area() : 도형의 면적을 계산하여 반환
-perimeter() : 도형의 둘레를 계산하여 반환
-name() : 도형의 이름을 반환
-getColor() : 도형의 색상을 반환

+----------------+     +--------------+      +----------------+    +------------------+
|    EventBus    |     |    Event     |      |     Shape      |    |    ShapeManager  |
+----------------+     +--------------+      +----------------+    +------------------+
| - subscribers: |     |              |      |                |    |   - shapes:      |
|    vector<function<void(const Event&)>> | |                |    |     vector<unique_ptr<Shape>> |
|                |     |              |      |                |    |                  |
| + getInstance(): EventBus& | |                |    |                  |
| + subscribe(callback: function<void(const Event&)>) | |                |    |   + addShape(shape: unique_ptr<Shape>): void |
| + publish(event: const Event&): void | |                |    |   + startDrawing(): void |
|                |     |              |      |                |    |   + startUpdating(): void |
+----------------+     +--------------+      +----------------+    +------------------+
                                   |                                  |        |
                                   |                                  |        |
+---------------------+            |                                  |        |
|     DrawEvent      |            |                                  |        |
+---------------------+            |                                  |        |
|                     |            |                                  |        |
+---------------------+            |                                  |        |
                                   |                                  |        |
+---------------------+            |                                  |        |
|    UpdateEvent     |            |                                  |        |
+---------------------+            |                                  |        |
|                     |            |                                  |        |
+---------------------+            |                                  |        |
                                   |                                  |        |
+---------------------+            |                                  |        |
|       Circle        |            |                                  |        |
+---------------------+            |                                  |        |
| - radius: double    |            |                                  |        |
+---------------------+            |                                  |        |
| + Circle(radius: double) |       |                                  |        |
| + draw(): void      |------------+----------------------------------+        |
| + update(): void    |--------------------------------------------------------+
|                     |
+---------------------+

+-----------------------+
|      Rectangle        |
+-----------------------+
| - width: double       |
| - height: double      |
+-----------------------+
| + Rectangle(width: double, height: double) |
| + draw(): void        |
| + update(): void      |
|                       |
+-----------------------+

<EventBus의 역할>
이벤트를 관리하는 시스템
*이벤트(Event)란?
이벤트는 어떤 특정한 일이 발생했음을 나타내는 신호이다. 
예로 도형이그려지거나 업데이트되는 일이 있을 수 있다. 
*구독자(Subscriber)란?
이벤트가 발생했을 때 그 이벤트에 반응하는 함수나 객체이다.
예로 도형이 그려질 때 화면에 그려주는 작업을 수행하는 코드가 구독자이다.
*동작방식
1)구독관리
-여러 구독자를 등록(구독)할 수 있다.
-구독자는 "이벤트가 발생하면 내가 알려줄게"라고 EventBus에게 말한다.
-EventBus는 이러한 구독자들을 리스트에 저장해둔다.
2)이벤트 발행
-어떤 이벤트가 발생했을 때 EventBus는 저장해둔 구독자들에게 그 이벤트가 발생했음을 알림
-EventBus는 모든 구독자에게 이벤트가 발생했다고 알리며, 구독자들은 이에 따라 자신의
작업 수행

<프로그램>
1. Event.h
//Event.h
#ifndef EVENT_H
#define EVENT_H

#include <iostream>

class Event {
public:
	virtual ~Event() = default;
};

#endif //EVENT_H

2. EventBus.h
프로그램 내에서 다양한 이벤트를 관리하고, 이벤트가 발생할 때 구독자에게 알려주는
역할을 한다.
//EventBus.h
#ifndef EVENTBUS_H
#define EVENTBUS_H

#include <functional> //함수 객체를 사용
#include <vector> //구독자 콜백 저장
#include <mutex> //멀티스레드환경 안전 접근
#include "Event.h" //Event 클래스 또는 구조체 사용

class EventBus { //EventBus 클래스 정의
public:
  //싱글톤 패턴을 사용하여 구현되었다. 
  //프로그램 내에서 단 하나의 EventBus 인스턴스만 존재할 수 있다. 
  //이를 통해 어디서나 이벤트를 구독하고 발행할 수 있다.
	static EventBus& getInstance();

  //이벤트를 구독하는 데 사용. 구독자는 이벤트가 발생했을 때 호출될 콜백함수 등록
  //등록된 콜백 함수는 이벤트가 발생할 때마다 호출된다.
	void subscribe(std::function<void(const Event&)> callback);

  //이벤트를 발행하는 데 사용. 등록된 모든 구독자에게 해당 이벤트를 전달한다.
  //이벤트는 콜백 함수를 통해 각 구독자에게 전달되면 이후 각 구독자는 필요한 작업을
  //수행할 수 있다.
	void publish(const Event& event);

private:
        //이벤트를 구독하는 함수 객체들을 저장하는 벡터
        //구독한 콜백 함수들이 여기에 저장된다.
	std::vector<std::function<void(const Event&)>> subscribers;

        //멀티스레드 환경에서 subscribe, publish함수를 안전하게 동시에 사용하기 위한 
        //동기화를 제공, 여러 스레드가 동시에subscribe, publish함수를 호출할 때 발생할
        //수 있는 문제 방지
	std::mutex mutex;

        //싱글톤으로 구현되었기 때문에 private 섹션에 넣는 것이 바람직하다.
        //외부에서 객체를 복사하거나 새로 생성하는 것을 방지해야 하기때문이다.
        //기본생성자
	EventBus() = default; //기본생성자를 사용하여 EventBus객체를 생성하겠다
                              //명시적생성자가 없는 경우 컴파일러가 자동생성한다
	//복사생성자
        EventBus(const EventBus&) = delete; //복사생성자를 삭제하겠다 
                                      //EventBus 객체를 다른 객체로 복사하는것을
                                      //허용하지않는다
        //복사할당연산자
	EventBus& operator = (const EventBus&) = delete; //복사할당연산자를 삭제하겠다
};

#endif //EVENTBUS_H

3. EventBus.cpp
//EventBus.cpp
#include "EventBus.h"

//싱글톤 인스턴스 반환
//싱글톤 패턴은 어플리케이션 전체에서 하나의 인스턴스만을 유지하는 디자인 패턴이다
EventBus& EventBus::getInstance()
{
	static EventBus instance; //단일 인스턴스를 생성
	return instance; 
}

//이벤트를 구독하는 콜백 함수를 등록한다
void EventBus::subscribe(std::function<void(const Event&)> callback)
{
	std::lock_guard<std::mutex> lock(mutex);
	subscribers.push_back(callback); //새로운 콜백함수를 subscribers벡터에추가
}

//등록된 모든 콜백 함수에 이벤트를 게시하며 뮤텍스를 사용하여 스레드간 동기화보장
void EventBus::publish(const Event& event)
{
	std::lock_guard<std::mutex> lock(mutex);
  //subscribers벡터에 등록된 각 콜백 함수에 대해 이벤트를 전달한다
	for (const auto& subscriber : subscribers) {
		subscriber(event);
	}
}

3.EventClasses.h
다양한 종류의 이벤트를 정의하기 위해 사용
이벤트 클래스들이 Event클래스를 상속하기 때문에 Event클래스의 정의가 필요하다
//EventClasses.h
#ifndef EVENTCLASSES_H
#define EVENTCLASSES_H

#include "Event.h"

// Example event classes
class ShapeAddedEvent : public Event {
public:
	ShapeAddedEvent(const std::string& name) : shapeName(name) {
		std::cout << tostring() << std::endl;
	}
	std::string tostring() const {
		return "Shape added Event : " + shapeName;
	}
private:
	std::string shapeName;
};

class ShapeRemovedEvent : public Event {
public:
	ShapeRemovedEvent(const std::string& name) : shapeName(name) {
		std::cout << tostring() << std::endl;
	}
	std::string tostring() const {
		return "Shape Removed Event : " + shapeName;
	}
private:
	std::string shapeName;
};

#endif // EVENTCLASSES_H

4.EventHandler.h
이벤트 핸들러 함수들을 정의한다
//EventHandler.h
#ifndef EVENTHANDLER_H
#define EVENTHANDLER_H

#include "Event.h"

// Event handler functions
void onShapeAdded(const Event&);
void onShapeRemoved(const Event&);

#endif // EVENTHANDLER_H

5.EventHandler.cpp
선언된 이벤트 핸들러 함수들의 구현을 제공한다
//EventHandler.cpp
#include "EventHandler.h"

void onShapeAdded(const Event&) {
    std::cout << "Shape added event received!" << std::endl;
}

void onShapeRemoved(const Event&) {
    std::cout << "Shape removed event received!" << std::endl;
}

6.main.cpp

//main.cpp
#include <iostream>
#include "ShapeManager.h"
#include "Rectangle.h"
#include "Circle.h"
#include "EventBus.h"
#include "EventHandler.h" // Include event handler functions

int main() {
    EventBus::getInstance().subscribe(onShapeAdded);
    EventBus::getInstance().subscribe(onShapeRemoved);

    ShapeManager manager;
    manager.addShape(std::make_unique<Rectangle>(10, 5, "blue"));
    manager.printShapes(); 
    manager.removeShape(0);
    manager.printShapes();

    return 0;
}

7. Circle.h
//Circle.h
#ifndef CIRCLE_H
#define CIRCLE_H

#include "Shape.h"
#define M_PI 3.141592

class Circle : public Shape {
public:
    Circle(double r, const std::string& c) : radius(r), color(c) {}
    double area() const override;
    double perimeter() const override;
    std::string name() const override;
    std::string getColor() const override;
private:
    double radius;
    std::string color;
};

8. Circle.cpp
//Circle.cpp
#include "Circle.h"
#include <string>

double Circle::area() const {
    return M_PI * radius * radius;
}

double Circle::perimeter() const {
    return 2 * M_PI * radius;
}

std::string Circle::name() const {
    return "Circle";
}

std::string Circle::getColor() const {
    return color;
}
#endif // CIRCLE_H

9. Rectangle.h
//Rectangle.h
#ifndef RECTANGLE_H
#define RECTANGLE_H

#include "Shape.h"

class Rectangle : public Shape {
public:
    Rectangle(double w, double h, const std::string& c) : width(w), height(h), color(c) {}
    double area() const override;
    double perimeter() const override;
    std::string name() const override;
    std::string getColor() const override;
private:
    double width;
    double height;
    std::string color;
};

#endif // RECTANGLE_H

10. Rectangle.cpp
//Rectangle.cpp
#include "Rectangle.h"
#include <string>

double Rectangle::area() const {
    return width * height;
}

double Rectangle::perimeter() const {
    return 2 * (width + height);
}

std::string Rectangle::name() const {
    return "Rectangle";
}

std::string Rectangle::getColor() const {
    return color;
}

11.ShapeManager.h
//ShapeManager.h
#ifndef SHAPEMANAGER_H
#define SHAPEMANAGER_H

#include <shared_mutex>
#include <iomanip>
#include "Shape.h"
#include "EventBus.h"
#include "EventClasses.h"

class ShapeManager {
public:
	void addShape(std::unique_ptr<Shape> shape);
	void printShapes() const;
	void removeShape(size_t index);

private:
	std::vector<std::unique_ptr<Shape>> shapes_;
	mutable std::mutex mutex;
	mutable std::shared_mutex sharedMutex;
};

#endif //SHAPEMANAGER_H

12.ShapeManager.cpp
//ShapeManager.h
#include "ShapeManager.h"

void ShapeManager::addShape(std::unique_ptr<Shape> shape)
{
	{
		std::lock_guard<std::mutex> lock(mutex);
		shapes_.push_back(std::move(shape));		
	}

	//새 도형 추가 이벤트 발행
	EventBus::getInstance().publish(ShapeAddedEvent(shapes_.back()->name()));
}

void ShapeManager::printShapes() const
{
	std::shared_lock<std::shared_mutex> lock(sharedMutex);
	if (shapes_.empty()) {
		std::cout << "No Shapes added yet." << std::endl;
		return;
	}
	std::cout << "Shapes added : " << std::endl;
	for (const auto& shape : shapes_) {
		std::cout << "Name: " << shape->name() << ", Color: " << shape->getColor() << std::endl;
		std::cout << "Area: " << std::fixed << std::setprecision(2) << shape->area() << ", Perimeter: " << std::fixed << std::setprecision(2) << shape->perimeter() << std::endl;
	}
}

void ShapeManager::removeShape(size_t index)
{
	std::string removed_name;
	{
		std::lock_guard<std::mutex> lock(mutex);
		if (index < shapes_.size()) {
			removed_name = shapes_.back()->name();
			shapes_.erase(shapes_.begin() + index);
		}
		else {
			std::cout << "Invalied index." << std::endl;
			return;
		}
	}
	//도형 제거 이벤트 발행
	EventBus::getInstance().publish(ShapeRemovedEvent(removed_name));
}
<왜 도형 추가/제거 후 이벤트를 발행할까>
일반적으로 소프트웨어 시스템에서 관찰되는 일반적인 설게 원칙 중 하나이다.
1. 알림 및 갱신
다른 부분에서 해당 도형에 대한 정보를 업데이트해야할 때
GUI에서 해당 도형을 표시하는 부분이 있다면 도형이 제거되었거나 추가되었음을 
이를 관리하는 객체에게 알려줘야할때가 있다. 이를 통해 인터페이스를 새로 고칠 수 
있다.
2. 감시 및 로깅
이벤트를 구독하는 다른 클래스나 모듈이 있을 수 있다. 이벤트를 수신하는 시스템이나
클래스가 도형이 제거되었음을 감지하고 로그를 남기거나 추가 작업을 수행할 수 있다.
3. 관심분리(Separation of Concerns)
도형을 관리하는 부분과 도형에 대한 다양한 작업을 수행하는 부분을 분리하는 것이 좋다.
도형관리자는 도형의 추가, 제거 등의 작업을 처리하고, 다른 부분은 이러한 변경 사항에 
대해 관심을 가질 수 있다. 이렇게 하면 코드가 더 모듈화되고 유지 관리가 쉬워진다.
4. 확장성 및 유연성
이벤트를 통해 다양한 동작을 트리거할 수 있다. 도형이 제거되면 다른 도형에 영향을 주는
특정 작업을 수행 할 수 있다. 이를 통해 시스템이 더 유연하고 확장 가능해 진다.

<결과>
Shape added Event : Rectangle
Shape added event received!
Shape removed event received!
Shapes added
Name: Rectangle, Color: blue
Area: 50.00, Perimeter: 30.00
Shape Removed Event : Rectangle
Shape added event received!
Shape removed event received!
No Shapes added yet.

<FLOW CHART>
+-----------------------+             +-------------------+             +-----------------+
|        main()         |             |    ShapeManager   |             |     EventBus    |
+-----------------------+             +-------------------+             +-----------------+
        |                                      |                                  |
        |                                      |                                  |
        V                                      V                                  V
  Subscribe to                            Manage shapes                        Manage event
  events (onShapeAdded,                   (addShape,                            subscriptions
  onShapeRemoved)                           removeShape)                            (subscribe)
        |                                      |                                  |
        |                                      |                                  |
        V                                      V                                  V
  Publish                                 Print shapes                            |
  events                                  (printShapes)                           |
  (ShapeAdded, ShapeRemoved)                |                                  Publish
        |                                      |                                events
        |                                      |                                (ShapeAdded,
        V                                      V                                ShapeRemoved)
+------------------------+        +----------------------+                        |
|     EventHandlers      |        |      ShapeClasses     |                        |
+------------------------+        +----------------------+                        |
  onShapeAdded(Event)            Rectangle class                                 |
  onShapeRemoved(Event)              |       ^                                    |
                                      |       |                                    |
                                      |       +-----------> Circle class          |
                                      |                                            |
                                      +--------------------------------------------+
