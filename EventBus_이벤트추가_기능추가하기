<EventBust 다중 스레드를 사용한 도형 관리 프로그램 설계 및 구현>
설계의 전반적인 이유
1. 모듈화와 책임 분리
 - 각 파일이 특정한 역할을 담당하며, 이를 통해 코드의 가독성과 유지보수성을 높입니다.
 - EventType.h는 이벤트 유형을 정의하고, EVent.h는 이벤트 데이터를 캡슐화하며,
   EventBus.h는 이벤트 발행과 구독 메커니즈믈 관리합니다.
2. 확장성과 유연성
 - 새로운 이벤트 유형을 추가하거나 새로운 이벤트 데이터를 추가하는 것이 용이합니다.
 - 다양한 형태의 이벤트 핸들러를 지원하여 시스템의 유연성을 높입니다.
3.효율성과 성능
 - std::unordered_map을 사용하여 이벤트 유형에 대한 빠른 검색을 가능하게 하고,
   벡터를 사용하여 핸들러를 효율적으로 관리합니다.
 - shared_mutex를 사용하여 동시성 문제를 방지하고, 읽기와 쓰기 작업을 효율적으로
   처리합니다.
1) EventType
-역할 : 이벤트 유형을 정의합니다. 이벤트 기반 시스템에서 발생할 수 있는 다양한 이벤트의
유형을 명확히 구분합니다.
-이점 
 * 각 이벤트를 명확히 구분하여 이벤트 핸들러를 등록하고 호출할 때 사용합니다.
 * 유지보수 및 확장이 용이합니다. 새로운 이벤트 유형을 추가할 때 이 파일에만 열거형 값
   을 추가하면 됩니다.

// EventType.h
// -----------------------------------------------------------------------------
// 파일: EventType.h
// 
// 설명: 
// 이 파일은 EventBus가 처리할 수 있는 이벤트의 유형을 포함하는 
// EventType 열거형 클래스를 정의합니다.
//
// 작성자: 김나영
// 작성일: 2024-06-07
// -----------------------------------------------------------------------------#ifndef EVENTTYPE_H
#ifndef EVENTTYPE_H
#define EVENTTYPE_H

// 열거형 클래스: EventType
// 이 열거형 클래스는 EventBus 내에서 발행되고 구독될 수 있는 이벤트의 
// 유형을 정의합니다. 각 유형은 발생할 수 있는 서로 다른 종류의 이벤트를 나타냅니다.
enum class EventType { //서로 다른 유형의 열거형 상수 정의 시 사용
	Add,		  // 도형 추가
	Remove		// 도형 제거
};

#endif // EVENTTYPE_H

2) Event
-역할 : 이벤트 데이터를 캡슐화합니다. 이벤트 유형과 이벤트와 관련된 구체적인 데이터를 
포함합니다.
-이점
  * 이벤트가 발생할 때 필요한 데이터를 하나의 구조체로 관리할 수 있습니다.
  * 각 이벤트가 어떤 유형인지와 관련 데이터를 명확히 구분 할 수 있습니다.
// Event.h
// -----------------------------------------------------------------------------
// 파일: Event.h
// 
// 설명: 
// 이 파일은 EventBus가 처리할 수 있는 이벤트를 정의하는 Event 구조체를
// 포함합니다. Event 구조체는 이벤트의 유형과 관련된 데이터를 포함합니다.
//
// 작성자: 김나영
// 작성일: 2024-06-07
// -----------------------------------------------------------------------------
#ifndef EVENT_H
#define EVENT_H

#include "EventType.h"
#include <string>

// 구조체: Event
// 이 구조체는 EventBus에서 처리할 수 있는 이벤트를 나타냅니다. 각 이벤트는
// 유형과 관련 데이터를 포함합니다.
struct Event { // 이벤트를 캡슐화하여 관련정보를 한곳에 모아두기 위함이다.
	EventType type;			// 이벤트의 유형을 나타냅니다 (Add 또는 Remove).
	std::string shapeType;	// 이벤트와 관련된 도형의 유형을 나타냅니다 (예: "Circle", "Rectangle").
};

#endif //EVENT_H

3)EventBus
- 역할 : 이벤트를 발행하고 구독하는 메커니즘을 제공한다. 이벤트 핸들러를 등록하고,
         이벤트가 발생했을 때 해당 핸들러를 호출한다.
- 이점 : EventHandler라는 별칭으로 정의하여 가독성을 높이고, 코드 중복을 줄입니다.
         유연성: 다양한 형태의 함수 객체를 이벤트 핸들러로 사용할 수 있다.
                 (람다,함수,멤버함수,일반함수 등)
         가독성 : std::function<void(const Event&)> 대신 EventHandler를 사용하여
                 코드가 더 간결하고 읽기 쉬워진다.
         핸들러관리
           std::unordered_map<EventType, std::vector<EventHandler>> handlers;
           이벤트 유형별로 여러 이벤트 핸들러를 관리합니다.
           효율적인 검색 : 해시 테이블을 사용하여 이벤트 유형에 대한 빠른 검색 제공
           다중핸들러지원 : 벡터를 사용하여 특정 이벤트 유형에 대해 여러 개의 핸들러
           를 저장하고, 순차적으로 호출할 수 있다.
           유연성 : 벡터를 사용하여 동적으로 핸들러를 추가하거나 제거할 수 있다.
          동시성제어
            mutable std::shared_mutex mutex : 핸들러 맵에 대한 동시 접근 제어
            동시성 문제 방지 : 여러 스레드가 동시에 이벤트 핸들러를 등록하거나 호출할
            때 발생할 수 있는 동시성 문제를 방지합니다.
            읽기-쓰기 잠금 : shared_mutex를 사용하여 읽기 작업이 여러 스레드에서 동시
            에 일어날 수 있도록 하고, 쓰기 작업은 단일 스레드에서만 일어나도록 합니다.
// EventBus.h
// -----------------------------------------------------------------------------
// 파일: EventBus.h
// 
// 설명: 
// 이 파일은 이벤트를 발행(publish)하고 구독(subscribe)할 수 있는 EventBus
// 클래스를 정의합니다. EventBus는 이벤트 기반 시스템의 중심 역할을 합니다.
//
// 작성자: 김나영
// 작성일: 2024-06-07
// -----------------------------------------------------------------------------
#ifndef EVENTBUS_H
#define EVENTBUS_H

#include <iostream>
#include <vector>
#include <functional>
#include <unordered_map>
#include <shared_mutex>
#include "Event.h"

// 클래스: EventBus
// 이 클래스는 이벤트의 발행(Publish)과 구독(subscribe)을 관리합니다.
// 이벤트 핸들러를 등록하고, 이벤트가 발생했을 때 해당 핸들러를 호출합니다.
class EventBus {
public:
	// 타입 정의: EventHandler
	// 이벤트를 처리하는 함수 객체를 나타냅니다. 
	// 이 함수는 const Event&를 인자로 받아야 합니다.
	// using : typedef키워드 대체, 템플릿 별칭 정의 시 사용
	// 클래스 내부에서 타입 정의 시 해당 타입을 클래스 외부에서도 사용 가능
	// const Event&를 인자로 받고 반환 타입이 void인 모든 함수,람다,함수 포인터,
	// 기타 호출 가능한 객체를 담을 수 있다.
	using EventHandler = std::function<void(const Event&)>;

	// 함수 : subscribe
	// 주어진 이벤트 유형에 대해 이벤트 핸들러를 등록합니다.
	// 매개변수:
	// - type: 등록할 이벤트 유형.
	// - handler : 이벤트가 발생했을 때 호출될 핸들러 함수.
	void subscribe(EventType type, EventHandler handler);
	// 함수 : publish
	// 주어진 이벤트를 발행합니다. 이 이벤트 유형에 등록된 모든 핸들러를 호출합니다.
	// 매개변수:
	// - event : 발행할 이벤트.
	void publish(const Event& event);

private:
	// 멤버 변수 : handlers
	// 이벤트 유형별로 등록된 이벤트 핸들러들을 저장하는 맵
	// unordered_map : 해시맵으로 키-값 쌍을 저장하는 연관 컨테이너
	// EventType : 키로 사용되는 열거형 클래스, 이벤트 유형
	// std::vector<EventHandler> : 등록된 이벤트 핸들러
	std::unordered_map<EventType, std::vector<EventHandler>> handlers;
	// 멤버 변수 : mutex
	// 핸들러 맵에 대한 동시 접근을 제어하기 위한 mutex.
	mutable std::shared_mutex mutex;
};
#endif //EVENTBUS_H

// EventBus.cpp
// ----------------------------------------------------------------------------
// 파일: EventBus.cpp
//
// 설명:
// 이 파일은 EventBus 클래스의 멤버 함수들을 구현합니다. subscribe() 함수는
// 특정 이벤트 유형에 대한 이벤트 핸들러를 등록하고, publish() 함수는 주어진
// 이벤트를 발행하여 해당 이벤트 유형에 등록된 모든 핸들러를 호출합니다.
//
// 작성자: 김나영
// 작성일: 2024-06-07
// ----------------------------------------------------------------------------

#include "EventBus.h"

void EventBus::subscribe(EventType type, EventHandler handler)
{
	// mutex를 사용하여 동시에 여러 스레드에서 핸들러를 등록하는 것을 방지
	std::unique_lock<std::shared_mutex> lock(mutex);
	//해당 이벤트 유형에 이벤트 핸들러를 추가
	handlers[type].push_back(handler);
}

void EventBus::publish(const Event& event)
{
	// mutex를 사용하여 동시에 여러 스레드에서 핸들러를 등록하는 것을 방지
	std::unique_lock<std::shared_mutex> lock(mutex);
	// 주어진 이벤트 유형에 등록된 모든 이벤트 핸들러 호출
	for (auto& handler : handlers[event.type]) {
		handler(event);
	}
}

4)EventListener
// EventListener.h
// -----------------------------------------------------------------------------
// 파일: EventListener.h
//
// 설명:
// 이 파일은 이벤트 리스너 클래스인 EventListener를 정의합니다. EventListener는
// EventBus에서 이벤트를 수신하고 처리합니다.
//
// 작성자: 김나영
// 작성일: 2024-06-07
// -----------------------------------------------------------------------------
#ifndef EVENTLISTENER_H
#define EVENTLISTENER_H

#include "EventBus.h"

class EventListener {
public:
	// EventBus에서 이벤트가 추가될 때 호출됩니다.
	void onAddEvent(const Event& event);
	// EventBus에서 이벤트가 제거될 때 호출됩니다.
	void onRemoveEvent(const Event& event);
};

#endif // EVENLISTENER_H

// -----------------------------------------------------------------------------
// 파일: EventListener.cpp
//
// 설명:
// 이 파일은 EventListener 클래스의 멤버 함수를 정의합니다. EventListener는
// EventBus에서 이벤트를 수신하고 처리합니다.
//
// 작성자: 김나영
// 작성일: 2024-06-07
// -----------------------------------------------------------------------------
#include "EventListener.h"

void EventListener::onAddEvent(const Event& event)
{
	// 이벤트가 추가되었음을 출력합니다.
	std::cout << "EventListener::onAddEvent->Added : " << event.shapeType << std::endl;
}

void EventListener::onRemoveEvent(const Event& event)
{
	// 이벤트가 제거되었음을 출력합니다.
	std::cout << "EventListener::onRemoveEvent->Removed : " << event.shapeType << std::endl;
}

5) Shape.h
// -----------------------------------------------------------------------------
// 파일: Shape.h
//
// 설명:
// 이 파일은 추상 클래스인 Shape를 정의합니다. Shape 클래스는 도형의 기본적인
// 특성을 나타내며, 이 클래스를 상속하여 다양한 종류의 도형을 구현할 수 있습니다.
//
// 작성자: 김나영
// 작성일: 2024-06-07
// -----------------------------------------------------------------------------
#ifndef SHAPE_H
#define SHAPE_H

#include <string>

//도형의 기본적인 특성을 나타낸다.
class Shape {
public:
	// 가상 소멸자, 메모리 누수 방지
	virtual ~Shape() = default; 
	// 파생클래스에서 반드시 재정의해야한다.
	// 도형의 유형을 반환하는 가상 함수, 도형의 유형 반환
	virtual std::string getType() const = 0;
};

#endif //SHAPE_H

6)ShapeManager
// -----------------------------------------------------------------------------
// 파일: ShapeManager.h
//
// 설명:
// 이 파일은 도형을 관리하는 ShapeManager 클래스를 정의합니다. ShapeManager는
// 다양한 종류의 도형을 관리하고 이벤트 버스를 통해 해당 도형의 추가 및 제거 이벤트를
// 발생시킵니다.
//
// 작성자: 김나영
// 작성일: 2024-06-07
// -----------------------------------------------------------------------------
#ifndef SHAPEMANAGER_H
#define SHAPEMANAGER_H

#include <vector>
#include <memory>
#include "Shape.h"
#include "EventBus.h"

class ShapeManager {
public:
	// 생성자. EventBus 클래스의 참조를 매개변수로 받는다.
	// ShapeManager가 이벤트버스와 연결됨을 의미
	ShapeManager(EventBus& bus);

	// 도형을 추가하는 멤버함수
	void addShape(std::unique_ptr<Shape> shape);
	// 도형을 제거하는 멤버함수(제거할 도형의 유형을 문자열 주소)
	void removeShape(const std::string& type);
private:
	// 도형을 저장하는 벡터
	std::vector<std::unique_ptr<Shape>> shapes;
	// 이벤트 버스 참조
	EventBus& eventBus;
};

#endif //SHAPEMANAGER_H

// -----------------------------------------------------------------------------
// 파일: ShapeManager.cpp
// 
// 설명:
// 이 파일은 ShapeManager 클래스의 멤버 함수를 정의합니다. ShapeManager는
// 다양한 종류의 도형을 관리하고 이벤트 버스를 통해 해당 도형의 추가 및 제거 이벤트를
// 발생시킵니다.
//
// 작성자: 김나영
// 작성일: 2024-06-07
// -----------------------------------------------------------------------------
#include "ShapeManager.h"

// ShapeManager는 도형을 관리하고, 도형의 추가와 제거에 따른 이벤트를 
// 이벤트 버스를 통해 발행하는 역할을 합니다.

ShapeManager::ShapeManager(EventBus& bus) 
	: eventBus(bus) {
	std::cout << "ShapeManager 생성자" << std::endl;
}

ShapeManager::~ShapeManager(){
	std::cout << "ShapeManager 소멸자" << std::endl;
}

// 새로운 도형을 추가하는 역할을 합니다.
void ShapeManager::addShape(std::unique_ptr<Shape> shape)
{
	// 추가할 도형의 유형을 가져옵니다.
	std::string type = shape->getType();
	// 도형을 벡터에 추가합니다.
	shapes.push_back(std::move(shape));
	// 도형 추가 이벤트를 이벤트 버스에 발행합니다.
	eventBus.publish({ EventType::Add, type });
}

// 특정 유형의 도형을 제거 하는 역할을 합니다.
void ShapeManager::removeShape(const std::string& type)
{
	// 주어진 도형 유형과 일치하는 도형을 벡터에서 찾습니다.
	// std::remove_if : 주어진 범위 내에서 특정 조건을 만족하는 요소를
	// 모두 벡터의 끝족으로 이동시키고, 그중 마지막 요소의 다음 위치 반환
	// 시작부터 끝까지 탐색, 도형이 주어진 타입과 일치하는지 확인
	// 만약 없다면 shapes.end(), 있다면 shapes.시작위치 반환
	auto it = std::remove_if(shapes.begin(), shapes.end(),
		[&type](const std::unique_ptr<Shape>& shape) {
			return shape->getType() == type;
		});

	//제거요소가 있을경우에만 삭제하고 삭제이벤트 발행
	if (it != shapes.end()) {
		shapes.erase(it, shapes.end());
		eventBus.publish({ EventType::Remove, type });
	}
}

7)main
// -----------------------------------------------------------------------------
// 파일: main.cpp
// 
// 설명:
// 이 파일은 프로그램의 진입점인 main 함수를 포함하고 있습니다. 
// 이 프로그램은 이벤트 버스를 생성하고, ShapeManager와 EventListener를 초기화한 후에,
// 사각형과 원을 추가하고 제거하는 간단한 시나리오를 실행합니다.
//
// 작성자: 김나영
// 작성일: 2024-06-07
// -----------------------------------------------------------------------------
#include "EventBus.h"
#include "ShapeManager.h"	
#include "EventListener.h"
#include "Rectangle.h"
#include "Circle.h"

int main() {
	// 이벤트 버스 객체를 생성합니다.
	EventBus bus;
	// ShapeManager와 EventListener객체를 초기화합니다.
	ShapeManager manager(bus);
	EventListener listener;

	// 이벤트 버스에서 도형 추가 이벤트를 구독하고,
	// 해당 이벤트가 발생하면 EventListener의 onAddEvent함수를 호출
	// [&listener] : 람다캡쳐, 외부에 있는 listener객체를 람다 함수
	// 내부로 캡쳐하여 사용하겠다는 의미이다.
	// [capture](parameters) -> return_type { body }
	bus.subscribe(EventType::Add, [&listener](const Event& event) {
		listener.onAddEvent(event);
	});

	bus.subscribe(EventType::Remove, [&listener](const Event& event) {
		listener.onRemoveEvent(event);
	});

	manager.addShape(std::make_unique<Rectangle>()); 
	manager.addShape(std::make_unique<Circle>());
	manager.removeShape("Rectangle");

	return 0;
}

8. Circle
//Circle.h
#ifndef CIRCLE_H
#define CIRCLE_H

#include "Shape.h"

class Circle : public Shape {
public:
	std::string getType() const override;
};

#endif //CIRCLE_H

//Circle.cpp
#include "Circle.h"

std::string Circle::getType() const
{
    return "Circle";
}

9. Rectangle
//Rectangle.h
#ifndef RECTANGLE_H
#define RECTANGLE_H

#include "Shape.h"

class Rectangle : public Shape {
public:
	std::string getType() const override;
};

#endif //RECTANGLE_H

//Rectangle.cpp
#include "Rectangle.h"

std::string Rectangle::getType() const
{
    return "Rectangle";
}

//결과
ShapeManager 생성자
EventListener::onAddEvent->Added : Rectangle
EventListener::onAddEvent->Added : Circle
EventListener::onRemoveEvent->Removed : Rectangle
ShapeManager 소멸자

<List출력 기능 추가하기>
1.EventType.h에 EventType 열거형 클래스에 List추가
enum class EventType {
	Add,		// 도형 추가
	Remove,		// 도형 제거
	List		// 도형 목록 추가
};

2.EventListener.h에 onListEvent선언 추가
void onListEvent(const Event& event);

3.EventListener.cpp에 onListEvent구현 추가
void EventListener::onListEvent(const Event& event)
{
	// 목록 이벤트가 호출되었음을 알립니다.
	std::cout << "EventListener::onListEvent->List : " << event.shapeType << std::endl;
}

4. ShapeManager.h에 void listSpahes() const;추가
// 도형 목록을 출력 추가
void listSaphes() const;

5. ShapeManager.cpp에 listSaphes() 구현
// 도형 목록 출력 추가
void ShapeManager::listSaphes() const
{
	std::cout << "도형 목록:" << std::endl;
	for (const auto& shape : shapes) {
		std::cout << shape->getType() << std::endl;
	}
}

6. main.cpp에 이벤트등록, 호출 추가
bus.subscribe(EventType::List, [&listener](const Event& event) {
	listener.onListEvent(event);
});

manager.listSaphes();

//결과
ShapeManager 생성자
EventListener::onAddEvent->Added : Rectangle
EventListener::onAddEvent->Added : Circle
EventListener::onAddEvent->Added : Rectangle
EventListener::onAddEvent->Added : Circle
EventListener::onRemoveEvent->Removed : Rectangle
도형 목록:
Circle
Circle
ShapeManager 소멸자

<면적구하는멤버함수추가하기>
1. Shape.h에 순수가상함수추가
virtual double area() const = 0;

2. Circle.h에 생성자, 멤버함수 정의 및 멤버변수 정의
public:
Circle(double radius);
double area() const override;
private:
double radius_;

3.Circle.cpp에 구현하기
Circle::Circle(double radius)
    : radius_(radius){}

// 도형의 넓이를 반환하는 함수 구현
double Circle::area() const
{
    return M_PI * radius_ * radius_;
}

4.Rectangle.h 생성자, 멤버함수 정의 및 멤버변수 정의
public:
   Rectangle(double width, double height);
   double area() const override;
private:
   double width_;
   double height_;

5.Rectangle.cpp 구현하기
Rectangle::Rectangle(double width, double height)
    : width_(width), height_(height) {}

double Rectangle::area() const
{
    return width_ * height_;
}

6.ShapeManager.cpp의 listShapes() 멤버함수에 넓이 출력 추가하기
// 도형 목록 출력 추가
void ShapeManager::listSaphes() const
{
	std::cout << "도형 목록:" << std::endl;
	for (const auto& shape : shapes) {
		std::cout << shape->getType() << std::endl;
		std::cout << shape->area()<< std::endl;
	}
}

7.main.cpp 수정하기
manager.addShape(std::make_unique<Rectangle>(3,4)); 
manager.addShape(std::make_unique<Circle>(2));
manager.addShape(std::make_unique<Rectangle>(5,6));
manager.addShape(std::make_unique<Circle>(6));
manager.removeShape("Rectangle");
manager.listSaphes();

//결과
ShapeManager 생성자
EventListener::onAddEvent->Added : Rectangle
EventListener::onAddEvent->Added : Circle
EventListener::onAddEvent->Added : Rectangle
EventListener::onAddEvent->Added : Circle
EventListener::onRemoveEvent->Removed : Rectangle
도형 목록:
Circle
12.5664
Circle
113.097
ShapeManager 소멸자
