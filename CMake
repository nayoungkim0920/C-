<CMake>
크로스 플랫폼 메이크는 소프트웨어 프로젝트를 위한 크로스 플랫폼 빌드 시스템이다.
사용자가 자신의 소프트웨어를 여러 플랫폼에서 컴파일하고 빌드할 수 있도록 해주는 도구이다.
이를 통해 동일한 프로젝트를 다양한 운영체제에서 쉽게 빌드 할 수 있다.
프로젝트의 소스 코드와 함께 사용되는 CMakeLists.txt라는 텍스트 파일을 사용하여 
빌드 프로세스를 정의한다. 이 파일은 각 플랫폼에서 사용할 빌드 시스템 파일을 생성하는데
사용된다. (Makefile, Visual Studio 솔루션 파일)
1. 크로스 플랫폼
여러 운영 체제와 컴파일러를 지원하여 동일한 소스 코드로 여러 플랫폼에서 소프트웨어를 
빌드할 수 있다.
2. 간단한 구문
비교적 간단하며 사용자가 쉽게 이해하고 사용할 수 있다.
3. 자동화된 빌드 프로세스
프로젝트의 종속성을 자동으로 관리하고, 빌드환경을 설정하고, 빌드 단계를 자동화하여 
개발자가 빠르게 소프트웨어를 빌드할 수 있도록 도와준다.
4. 모듈화된 구성
프로젝트를 여러 모듈로 구성하여 각 모듈을 개별적으로 빌드하고 관리할 수 있다.
5. 확장 가능성
다양한 플러그인 및 확장 기능을 지원하여 사용자가 빌드 프로세스를 확장하고 사용자 정의할 
수 있다.

<CMakeLists>
CMake프로젝트의 구성파일이다. CMake는 크로스 플랫폼 빌드 시스템으로, 소스 코드를 기반으로
프로젝트를 빌드하기 위한 Makefile이나 Visual Studio 솔루션 같은 빌드 시스템 파일을
생성한다. 이러한 빌드 파일을 생성하기 위해 CMake는 CMakeLists.txt파일을 읽고 
프로젝트의 구성 및 요구사항을 분석한다.
1. 프로젝트 이름과 버전 지정
project() 프로젝트의 이름과 버전을 설정한다.
2. 컴파일러 및 기본 설정
cmake_minimum_required() 필요한 최소 CMake버전 지정
set() 프로젝트의 옵션과 변수 설정
3. 라이브러리 및 패키지 찾기
find_package() 필요한 라이브러리나 패키지를 찾는다. (Qt나 OpenCV)
4. 빌드 대상 추가
add_executable() 실행파일을 추가하거나, 
add_library() 명령어를 사용하여 라이브러리를 추가한다.
5. 라이브러리 링크
target_link_libraries() 명령어를 사용하여 라이브러리를 빌드 대상에 링크한다.
6. 빌드 옵션 설정
set_target_properties() 빌드 대상의 속성을 설정, 실행파일의 출력, 디렉토리 지정
7.사용자 정의 명령 추가
add_custom_command() 사용자 정의 빌드 단계를 추가할 수 있다. 빌드 프로세스 중에 
사용자 지정 명령을 실행할 수 있다.

<CMakeLists.txt>
cmake_minimum_required(VERSION 3.14)
project(Project9)

# Qt 설정
set(CMAKE_PREFIX_PATH "C:/Qt/6.7.1/msvc2019_64")

find_package(Qt6 REQUIRED COMPONENTS Widgets Core Gui)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

# OpenCV 설정
set(OpenCV_DIR "C:/opencv/build")
find_package(OpenCV REQUIRED)

# 소스 파일 및 헤더 파일 설정
set(SOURCES
    main.cpp
)

set(UIS
    main.ui
)

# 실행 파일 추가
add_executable(Project9 ${SOURCES} ${UIS})

# Qt 라이브러리 링크
target_link_libraries(Project9 Qt6::Widgets Qt6::Core Qt6::Gui)

# OpenCV 라이브러리 링크
target_link_libraries(Project9 ${OpenCV_LIBS})

# 실행 파일 출력 디렉토리 설정
set_target_properties(Project9 PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/Debug"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/Release"
)

# Debug 및 Release 구성에 맞는 OpenCV DLL 복사 스크립트
add_custom_command(TARGET Project9 POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "${OpenCV_DIR}/x64/vc16/bin/opencv_world490${CMAKE_BUILD_TYPE}.dll"
    $<TARGET_FILE_DIR:Project9>
)
