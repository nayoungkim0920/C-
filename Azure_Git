<Azure_Git_VisualStudio2022>
1. Azure DevOps Services
마이크로소프트가 제공하는 클라우드 기반의 개발 도구 모음이다. 
소프트웨어 개발 팀이 협업하고 프로젝트를 관리하며 코드를 작성, 빌드, 테스트, 배포하는 
과정을 통합하여 지원한다. 소프트웨어 개발의 모든 단계를 한 곳에서 관리할 수 있도록
도와주는 플랫폼이다.
팀이 소프트웨어를 개발하고 관리하는 모든 과정을 쉽게 관리할 수 있도록 도와주는 도구이다.
개발자가 코드를 작성해서 저장소에 저장하면 자동으로 그 코드를 빌드하고 테스트하고, 
필요한 경우 서버에 배포할 수 있다. 프로젝트의 진행 상황을 추적하고, 어떤 기능이 필요한지,
어떤 버그가 있는지를 시각적으로 관리할 수 있는 도구도 제공한다.
소프트웨어 개발 과정이 더 효율적이고 체계적으로 이루어질 수 있다.
1) Boards(작업관리도구)
- 칸반보드, 스크럼보드, 백로그관리
작업항목을 시각적으로 관리하고 추적한다.
-작업항목
버그, 기능 요청 등 다양한 작업 항목을 생성하고 할당한다.
2)Repos(코드저장소)
-Git리포지토리
분산버전관리시스템인 Git을 사용하여 소스코드를 저장하고 관리한다.
-버전관리
코드 변경 이력을 추적하고 협업을 지원한다.
3)Pipelines(CI/CD(지속적통합 및 지속적배포)도구)
-자동빌드 및 배포
코드를 커밋할 때마다 자동으로 빌드하고 테스트 하며, 필요시 배포한다.
-빌드파이프라인
코드를 빌드하고 테스트하는 과정을 자동화한다.
-릴리즈파이프라인
빌드된 코드를 다양한 환경에 배포한다.
4)Test Plans(테스트 관리 도구)
-테스트 계획 및 사례
소프트웨어 테스트 계획을 수립하고 실행한다.
-자동화된 테스트
테스트를 자동화하여 품질을 보장한다.
5)Artifacts(패키지관리)
-패키지피드
NuGet, npm, Maven 등의 패키지를 호스팅하고 관리한다.

-장점
1)통합된 워크플로우
개발, 테스트 , 배포를 하나의 플랫폼에서 관리할수 있다.
2)팀 협업 지원
팀원 간의 효율적인 협업을 돕고, 작업 항목을 시각적으로 관리할 수 있다.
3)자동화
CI/CD 파이프라인을 통해 반복적인 작업을 자동화하여 개발 속도를 높이고 오류를 줄인다.
4)클라우드기반
클라우드에서 제공되므로 설치 및 유지 관리가 필요 없고, 어디서나 접근할 수 있다.

2.Git(Global Information Tracker)
분산버전관리시스템(DVCS, Distributed Version Control System)으로,
소프트웨어 개발 프로젝트에서 소스 코드를 효율적으로 관리하고 협업할 수 있게 도와주는 
도구이다. 리누스 토르발스에 의해 2005년에 리눅스 커널 개발을 위해 만들어졌으며, 현재는
다양한 프로젝트에서 널리 사용되고 있다.
소프트에어 개발 프로젝트에서 소스 코드를 효율적으로 관리하고 협업을 지원하는 강력한 도구
이다. 분산 버전 관리 시스템으로서 빠른 속도와 강력한 브랜칭 및 병합 기능을 제공하며, 
개발자들이 효율적으로 협업할 수있도록 돕는다. 
-특징
1)분산버전관리
각 개발자는 로컬 컴퓨터에 전체 리포지토리의 복사본을 가진다.
이로인해 중앙서버가없어도 개발자간의 협업이 가능하다.
네트워크 연결 없이도 로컬에서 모든 버전 관리 작업(커밋, 브랜치 생성 등)을 수행할 수 있다.
2)빠른속도
로컬에서 대부분의 작업이 수행되므로 빠르게 동작한다.
커밋,브랜치생성, 병합 등의 작업이 빠르고 효율적이다.
3)강력한 브랜칭 및 병합 기능
브랜치를 생성하고 관리하는 것이 매우 간편하다. 브랜치를 사용하면 다양한 기능이나 버그
수정을 독립적으로 개발할 수 있다.
브랜치 간의 병합이 용이하며, 충돌 해결 도구를 제공하여 병합 충돌을 쉽게 해결 할 수 있다.
4)작은크기의 저장소
효율적인 데이터 압축 및 저장방식을 사용하여 저장소의 크기를 최소화한다.
변경 사항만 저장하여 저장소의 크기를 줄인다.
5)강력한 히스토리 추적
모든 변경 사하이 히스토리에 기록되어 과거의 특정 시점으로 돌아갈 수 있다.
커밋 메시지와 함께 변경 사항을 기록하여 추적이 용이하다.
-주요개념
1)리포지토리
프로젝트의 파일과 변경 이력을 저장하는 공간이다. 로컬리포지토리와 원격리포지토리로 구분된다.
2)커밋
변경 사항을 리포지토리에 저장하는 작업이다. 각 커밋은 고유한 해시값을 가지며, 
변경된 파일과 커밋 메시지를 포함한다.
3)브랜치
독립적으로 작업할 수 있는분기이다. 기본 브랜치는 main 또는 master이며, 새로운 기능이나
버그 수정을 위해 별도의 브랜치를 생성할 수 있다.
4)병합
하나의 브랜치에서 다른 브랜치로 변경 사항을 통합하는 작업이다. 
충돌이 발생할 경우 이를 해결해야 한다.
5)푸시와 풀
푸시:로컬 리포지토리의 변경 사항을 원격 리포지토리에 업로드하는 작업이다.
풀:원격 리포지토리의 변경 사항을 로컬이포지토리로 가져오는 작업이다.
6)클론
원격 리포지토리의 복사본을 로컬 리포지토리에 생성하는 작업이다. 클론을 통해 전체 
리포지토리를 로컬에서 사용할 수 있다.
