EventBus : 이벤트기반 아키텍쳐
1. 이벤트 클래스 : 다양한 이벤트 유형을 정의하는 기본 클래스
2. 리스너(또는 핸들러) : 특정 이벤트를 수신하고 처리하는 객체
3. 이벤트 버스 클래스 : 이벤트를 등록하고, 이벤틀 발생 시 적절한 리스터에게 전달하는 역할

1)이벤트클래스(추상클래스)
모든 이벤트의 기본이 되는 Event클래스를 정의한다.
//Event.h
#ifndef EVENT_H
#define EVENT_H

// Event class
// 모튼 이벤트의 기본 클래스입니다.
// 이 클래스를 통해 다양한 이벤트를 정의할 수 있습니다.
class Event {
public:
	// 가상 소멸자는 객체가 삭제될 때 자원을 적절히 해제할 수 있도록 합니다.
	// default : 컴파일러가 기본 소멸자의 기본 구현을 자동으로 생성하도록 지시한다.
	// 소멸자가 필요할 때 컴파일러가 기본 동작을 수행하도록 한다.
  //다형성과 동적 할당된 객체의 올바른 소멸을 보장하기 위함으로
  //기본클래스에서 가상 소멸자를 정의하면 파생 클래스의 객체가 소멸될
  //때 올바른 소멸자가 호출된다.
  //만약 가상 소멸자를 선언하지 않거나 기본 소멸자를 사용한다면, 파생 클래스의 소멸자
  //호출할 때 메모리 누수가 발생할 수 있습니다. 가상소멸자를 사용하여 파생클래스의 
  //소멸자가 올바르게 호출되도록 하는 것이 좋다.
	virtual ~Event() = default;

	//순수가상함수로 각 파생 클래스에서 이 메서드를 구현해야만함을 알려줍니다.
  //이벤트의 이름을 반환하는 역할을 합니다. 
  //const char* : 함수의 반환형을 나타냅니다. 호출된 곳에서 반환된 문자열을 
  //변경하지 않겠다는 것을 의미한다. 즉, 반환된 문자열을 수정할 수 없을을 나타
  //const : 멤버 함수의 상수성을 나타냅니다. 해당 함수는 객체의 내부 상태를 
  //변경하지 않는 다는 것을 보장한다. 즉, 함수 내에서는 멤버 변수를 수정할 수 
  //없습니다. 이러한 함수는 상수 객체에 대해서도 호출 될 수 있습니다.
  //객체의 상태를 변경하지 않기 때문에 여러 스레드에서 안전하게 사용될 수 있습니다.
	virtual const char* getName() const = 0;
};

#endif // EVENT_H

<=default의 의미와 역할>
-의미 : 컴파일러가 해당 멤버 함수의 기본 구현을 제공하게 합니다.
-역할 : 기본 소멸자, 복사 생성자, 이동 생성자, 복사 대입 연산자, 이동 대입 연산자 등
을 명시적으로 선언하여 사용자가 직접 구현할 필요 없이 컴파일러가 자동으로 제공하는 
기본 기능을 사용할 수 있게 합니다.
이러한 문법은 코드의 가독성을 높이고, 기본적인 멤버 함수의 구현을 자동화하여 코드의
유지보수성을 높이는데 기여합니다.

<일반소멸자 vs 가상소멸자>
각각 다른 상황에 적합한 상황이 있다. 그러나 일반적으로 가상소멸자를 사용하는 것이 더
안전하고 유연한 방법이다.
가상소멸자는 추가적인 오버헤드를 초래할 수 있으므로, 성능에 민감한 상황에서는 신중히
고려해야한다. 하지만 일반적으로는 가상 소멸자를 사용하여 유연성과 안전성을 확보하는것
이 좋다.
1. 다형성(Polymorphism)을 지원
기본 클래스에 가상 소멸자를 선언하면 파생 클래스에서 필요한 소멸자를 정의할 수 있다.
이것은 동적 할당된 객체를 가리키는 폳인터나 참조를 사용할 때 유용하다.
가상 소멸자가 없으면 파생클래스의 소멸자가 호출되지 않을 수 있다.
2. 자원 누출 방지
가상소멸자를 사용하면 파생 클래스에서 동적으로 할당된 자원을 올바르게 해제할 수 있다.
가상소멸자가 없으면 파생 클래스에서 추가적인 정리 작업을 수행할 수 없으므로 자원 누출
이 발생할 수 있다.
3. 상속 계층 구조의 일관성
일반 소멸자를 사용하면 파생 클래스에서 소멸자를 재정의하는것이 선택사항이며, 
누락될 수 있다. 반면 가상 소멸자를 사용하면 파생클래스에서 소멸자를 구현하는 것이 
예상되므로 일관성이 유지된다.


2)특정이벤트클래스
이벤트의 구체적인 유형을 정의
//MyEvent.h
//헤더 가드 : 이 파일이 여러 곳에서 중복해서 포함되지 않도록 하는 역할을 한다.
#ifndef MYEVENT_H
#define MYEVENT_H

#include "Event.h"

//Event class를 상속받음으로써 Event class의 모든 멤버 변수와 멤버 함수를 상속
//받게 된다. 이는 Event class의 모든 기능을 사용할 수 있음을 의미한다.
//이런 상속 관계를 통해 코드의 재사용성이 높아지고, 계층 구조를 구성하여 클래스
//간의 관계를 명확하게 표현할 수 있다. Event class를 확장하여 추가적인 데이터나
//동작을 포함 할 수 있도록 설계된 것이다.
//유연적으로 새로운 이벤트 유형을 쉽게 추가할 수 있다.
//다형성을 활용해 여러 종류의 이벤트를 통합적으로 다룰 수 있다.
//일관된 방식으로 다양한 유형의 이벤트를 처리 할 수 있다.
class MyEvent :public Event {
public:
	MyEvent(int data); //확장
	int getData() const; //확장
	const char* getName() const override; //상속

private:
	int data_; //확장
};

//헤더 가드의 닫음을 나타낸다. 이것으로 파일의 끝을 알리고 중복 포함을 방지한다.
#endif //MYEVENT_H

//MyEvent.cpp
#include "MyEvent.h"

//생성자 구현. 멤버 이니셜라이저 리스트를 사용하여 멤버 변수 초기화
MyEvent::MyEvent(int data) : data_(data) {}

//멤버변수를 반환만합니다.
int MyEvent::getData() const
{
	return data_;
}

//객체의 내부 상태를 변경하지 않음을 보장한다.
//객체 이름을 반환합니다.
const char* MyEvent::getName() const
{
	return "MyEvent";
}

3)리스너클래스(추상클래스)
//EventListener.h
#ifndef EVENTLISTENER_H
#define EVENTLISTENER_H

#include "Event.h"
#include "MyEvent.h"

class EventListener {
public:
	virtual ~EventListener() = default;
	virtual void onEvent(const Event& event) = 0;
};

#endif // EVENTLISTENER_H

//MyEventListener.cpp
#include "MyEventListener.h"

void MyEventListener::onEvent(const Event& event)
{
	if (event.getName() == std::string("MyEvent")) {
		const MyEvent& myEvent = static_cast<const MyEvent&>(event);
		std::cout << "Received MyEvent with data: " << myEvent.getData() << std::endl;
	}
}

4)EventBus
//EventBus.h
#ifndef EVENTBUS_H
#define EVENTBUS_H

#include <functional> //함수객체사용
#include <unordered_map> //이벤트 처리 함수들을 관리하기 위한 자료 구조 사용
#include <typeindex> //std::type_index 사용
#include "Event.h"

class EventBus {
public:
	//특정 이벤트 유형에 대한 리스너를 등록
	//이벤트 버스는 여러 종류의 이벤트를 처리해야 하므로 이벤트 유형에 따라 서로
        //다른 리스너 함수를 등록할 필요가 있다. 이러한 다양한 이벤트 유형에 대응하기
        //위해 템플릿을 사용하여 subscribe함수를 정의한다.
	template<typename EventType>	
	void subscribe(std::function<void(const EventType&)> listener);
	//이벤트 발행
	void publish(const Event& event);
private:
	//이벤트 유형별로 이벤트 처리 함수들을 관리하기 위한 자료 구조
	std::unordered_map<std::type_index, std::vector<std::function<void(const Event&)>>> listenersMap;
};

//subscribe함수의 템플릿 정의
//특정 이벤트 유형에 대한 리스너를 등록하는 함수. 이벤트 발생 시 해당 리스너를 호출한다.
//std::function을 사용하여 이벤트 유형에 따라 다른 타입의 리스너를 등록할 수 있다.
//람다함수를 사용하여 이벤트를 특정 유형으로 캐스팅하여 적절한 리스너를 호출한다.
template<typename EventType>
inline void EventBus::subscribe(std::function<void(const EventType&)> listener)
{
	auto& listeners = listenersMap[std::type_index(typeid(EventType))];
	listeners.push_back([listener](const Event& event) {
		listener(static_cast<const EventType&>(event));
	});
}

#endif // EVENTBUS_H

<unordered_map>
C++표준 라이브러리인 STL(Standard Template Library)에 포함된 컨테이너 중 하나이다.
해시 맵(Hash Map)이라고도 불리며, 키와 값을 쌍으로 저장하며 키를 사용하여 값을 검색
하는 자료 구조이다.
1)빠른 검색 속도 : 해시 함수를 사용하여 요소를 검색하기 때문에 평균적으로 매우 빠른 검색
속도를 제공한다. 알고리즘의 시간복잡도는 O(1)이다.
2)키-값 쌍 저장 : 각 요소는 키와 값의 쌍으로 저장된다. 이를 통해 주어진 키에 대한 값
에 빠르게 접근할 수 있다.
3)순서가없음: 요소들을 삽입한 순서대로 저장하지 않으며, 키의 해시 값에 따라 내부적으로
저장된다.
4)중복된 키 허용 안함 : 각 키는 유일해야하며, 중복된 키를 삽입하면 새로운 값으로 대체
5)메모리사용량: 일반적으로 해시 맵은 메모리를 많이 사용하며 , 공간을 위해 추가적인
메모리를 요구할 수 있다.

<템플릿>
템플릿을 사용하면 특정한 유형에 대해 이 함수를 여러 번 정의할 필요 없이 재사용 할 수 
있다. 즉 EventType에 따라 다른 유형의 이벤트를 처리하는 함수를 생성하는 템플릿이 된다.
템플릿을 사용하여 suscribe함수를 정의하면 코드의 재사용성과 유연성이 향상된다. 이를 통해
이벤트 버스는 여러 종류의 이벤트를 처리할 수 있으며, 각3각의 이벤트 유형에 대해 서로 
다른 리스너함수를 등록할 수 있다.

<inline>
코드의 성능을 향상 시키고 함수 호출 오버헤드를 줄이는데 사용된다.
1.성능 개선 함수를 인라인으로 처리하면 함수 호출 오버헤드가 줄어들어 성능을 향상 시킬
수 있다. 작은 함수나 자주 호출되는 함수를 인라인으로 처리하면 성능이 개선될 수 있다.
2. 헤더파일에 함수정의 포함: 일반적으로 클래스 템플릿이나 인라인 함수의 정의는 헤더파일
에 포함된다. 이 때 inline 키워드를 사용하여 함수를 인라인으로 처리하면 여러 소스 파일
에서 해당 함수를 사용할 때 링크 오류가 발생하지 않는다.
3. 함수 호출 오버헤드 제거: 함수를 인라인으로 처리하면 함수 호출이 아니라 암수의 본문
이 직접 실행되므로 함수 호출 오버헤드가 제거된다.

//EventBus.cpp
#include "EventBus.h"

void EventBus::publish(const Event& event)
{
	auto it = listenersMap.find(std::type_index(typeid(event)));
	if (it != listenersMap.end()) {
		for (const auto& listener : it->second) {
			listener(event);
		}
	}
}

5)main
//main.cpp
#include <iostream>
#include "Event.h"
#include "MyEvent.h"
#include "EventListener.h"
#include "MyEventListener.h"
#include "EventBus.h"

int main() {
    // 이벤트를 처리할 리스너 객체 생성
    MyEventListener myListener;

    // 이벤트 버스 객체 생성
    EventBus eventBus;

    // 이벤트 버스에 리스너 등록
    // std::placeholders::_1 : std::bind와 함께 사용
    // 함수나 멤버 함수를 래핑하여 새로운 함수 객체를 생성할 때 사용
	eventBus.subscribe<MyEvent>(
	    std::bind(
	        &MyEventListener::onEvent, 
	        &myListener, 
	        std::placeholders::_1
	    )
	);

    // 이벤트 생성
    MyEvent myEvent(42);

    // 이벤트 발행
    eventBus.publish(myEvent);

    return 0;
}

6)결과
Received MyEvent with data: 42
