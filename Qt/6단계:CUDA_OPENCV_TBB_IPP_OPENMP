-설치하기
1)OpenCV
C:\opencv(sources, build)
C:\opencv_contrib

2) IPP/TBB
C:\Program Files (x86)\Intel\oneAPI

3) cuDNN
C:\Program Files\NVIDIA\CUDNN\v9.1

4) CUDA Toolkit
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1

5) OpenMP(Visual Studio 20022)
프로젝트속성 > C/C++ > 언어 > OpenMP 지원 > 예

6 )시스템환경변수설정
CUDA_HOME
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1
CUDA_PATH
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1
CUDA_PATH_V12_1
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1
CUDNN_HOME
C:\Program Files\NVIDIA\CUDNN\v9.1\bin\12.4
OpenCV_DIR
C:/opencv/build
OPENCV_ENABLE_TBB
ON
Path
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1\bin
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1\libnvvp
C:\Program Files\NVIDIA\CUDNN\v9.1\bin\12.4
C:\opencv\build\bin
C:\opencv\build\x64\vc16\bin
C:\Qt\6.7.1\msvc2019_64\bin
C:\opencv\build
C:\Program Files (x86)\Intel\oneAPI\tbb\2021.12\bin
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1\bin
TBB_DIR
C:\Program Files (x86)\Intel\oneAPI\tbb\2021.12\bin
TBB_ROOT
C:\Program Files (x86)\Intel\oneAPI\tbb\2021.12\bin

-OpenCV 설정 및 제너레이트(Release/Debug)
1)Release
cmake -DCMAKE_BUILD_TYPE=Release -DOPENCV_EXTRA_MODULES_PATH="C:/opencv_contrib/modules" -DBUILD_opencv_cudaarithm=ON -DWITH_CUDA=ON -DCUDA_TOOLKIT_ROOT_DIR="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.8" -DCUDA_ARCH_BIN="7.5" -DCUDNN_LIB_DIR="C:/Program Files/NVIDIA/CUDNN/v9.1/lib/12.4/x64" -DCUDNN_LIBRARY="C:/Program Files/NVIDIA/CUDNN/v9.1/lib/12.4/x64/cudnn.lib" -DCUDNN_INCLUDE_DIR="C:/Program Files/NVIDIA/CUDNN/v9.1/include/12.4" -DOPENCV_DNN_CUDA=ON C:/opencv/sources
cmake --build . --config Release
2)Debug
cmake -DCMAKE_BUILD_TYPE=Debug -DOPENCV_EXTRA_MODULES_PATH="C:/opencv_contrib/modules" -DBUILD_opencv_cudaarithm=ON -DWITH_CUDA=ON -DCUDA_TOOLKIT_ROOT_DIR="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.8" -DCUDA_ARCH_BIN="7.5" -DCUDNN_LIB_DIR="C:/Program Files/NVIDIA/CUDNN/v9.1/lib/12.4/x64" -DCUDNN_LIBRARY="C:/Program Files/NVIDIA/CUDNN/v9.1/lib/12.4/x64/cudnn.lib" -DCUDNN_INCLUDE_DIR="C:/Program Files/NVIDIA/CUDNN/v9.1/include/12.4" -DOPENCV_DNN_CUDA=ON C:/opencv/sources
cmake --build .

3)CMakeListx.txt
cmake_minimum_required(VERSION 3.14)
project(Project1)

# Qt, OpenCV, CUDA 설정
set(CMAKE_PREFIX_PATH "C:/Qt/6.7.1/msvc2019_64" "C:/opencv/build")
find_package(Qt6 REQUIRED COMPONENTS Widgets Core Gui)
find_package(OpenCV REQUIRED COMPONENTS core imgproc highgui)  # 필요한 CUDA 모듈 추가  cudawarping cudaimgproc
find_package(CUDA REQUIRED)

# Intel oneAPI IPP 추가
set(IPP_INCLUDE_DIR "C:/Program Files (x86)/Intel/oneAPI/ipp/2021.11/include")
set(IPP_LIB_DIR "C:/Program Files (x86)/Intel/oneAPI/ipp/2021.11/lib")

# CUDA 및 cuDNN 경로 설정
set(CUDA_TOOLKIT_ROOT_DIR "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1")
set(CUDNN_ROOT_DIR "C:/Program Files/NVIDIA/CUDNN/v9.1")

# 추가 포함 디렉터리 설정
include_directories(
    ${IPP_INCLUDE_DIR}
    ${CUDA_INCLUDE_DIRS}
    ${CUDNN_INCLUDE_DIRS}
)

# CUDA 파일 설정
set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -std=c++11 --expt-relaxed-constexpr)

# 실행 파일 추가
qt6_wrap_cpp(MOC_FILES
    MainWindow.h
    ImageProcessor.h
)

add_executable(Project1
    main.cpp
    MainWindow.cpp
    MainWindow.h
    MainWindow.ui
    ImageProcessor.cpp
    ImageProcessor.h
    ${MOC_FILES}  # 이전에 생성한 MOC 파일
)

# Qt 및 OpenCV 라이브러리 링크
target_link_libraries(Project1
    Qt6::Widgets
    Qt6::Core
    Qt6::Gui
    ${OpenCV_LIBS}
)

# Intel oneAPI IPP 라이브러리 링크
target_link_libraries(Project1
    "${IPP_LIB_DIR}/ippimt.lib"
    "${IPP_LIB_DIR}/ippvmmt.lib"
    "${IPP_LIB_DIR}/ippsmt.lib"
    "${IPP_LIB_DIR}/ippcoremt.lib"
    "${IPP_LIB_DIR}/ippcore.lib"
    "${IPP_LIB_DIR}/ippi.lib"
    "${IPP_LIB_DIR}/ipps.lib"
    "${IPP_LIB_DIR}/ippcvmt.lib"
)

# CUDA 및 cuDNN 라이브러리 링크
target_link_libraries(Project1
    ${CUDA_LIBRARIES}
    ${CUDNN_LIBRARIES}
    ${CUDA_cudart_LIBRARY}
    ${CUDA_cublas_LIBRARY}
    ${CUDA_curand_LIBRARY}
)

# 병렬 처리 백엔드 설정
if(WIN32)
    # TBB, OpenMP는 자동으로 사용되므로 별도 설정 필요 없음
    # ONETBB 설정
    set(OPENCV_ENABLE_ONETBB ON)  # ONETBB를 사용하도록 설정
    if(OPENCV_ENABLE_ONETBB)
        target_compile_definitions(Project1 PRIVATE CV_ENABLE_ONETBB)
    endif()
endif()

# 실행 파일 출력 디렉토리 설정
set_target_properties(Project1 PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/Debug"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/Release"
)

# DLL 복사
# 디버그 빌드에서의 OpenCV opencv_world DLL 복사
add_custom_command(TARGET Project1 POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/x64/vc16/bin/opencv_world4100d.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMENT "Copying OpenCV Debug opencv_world DLL to output directory"
)

# 릴리스 빌드에서의 OpenCV opencv_world DLL 복사
add_custom_command(TARGET Project1 POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/x64/vc16/bin/opencv_world4100.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMENT "Copying OpenCV Release opencv_world DLL to output directory"
)

# 디버그 빌드에서의 OpenCV DLL 복사
add_custom_command(TARGET Project1 POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Debug/opencv_imgcodecs4100d.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Debug/opencv_core4100d.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Debug/opencv_imgproc4100d.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMENT "Copying OpenCV Debug DLLs to output directory"
)

# 릴리스 빌드에서의 OpenCV DLL 복사
add_custom_command(TARGET Project1 POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Release/opencv_imgcodecs4100.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Release/opencv_core4100.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Release/opencv_imgproc4100.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMENT "Copying OpenCV Release DLLs to output directory"
)

# IPP 헤더 파일 포함
target_include_directories(Project1 PRIVATE
    ${IPP_INCLUDE_DIR}
)



