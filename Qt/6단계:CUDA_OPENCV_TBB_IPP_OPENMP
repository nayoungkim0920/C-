-구성
OpenCV : 4.10.0
CUDA : 12.1 (vs 2017 ~ 2019만 지원)
cuDNN : 9.1
VisualStudio : 2019

-설치하기
1)OpenCV
C:\opencv(sources, build)
C:\opencv_contrib

2) IPP/TBB
C:\Program Files (x86)\Intel\oneAPI

3) cuDNN
C:\Program Files\NVIDIA\CUDNN\v9.1
cudnn-windows-x86_64-9.2.0.82_cuda12-archive.zip
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1에
include, lib, bin 덮어씌우기
//Video_Codec_SDK_12.2.72.zip

4) CUDA Toolkit
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1

5) OpenMP(Visual Studio 20022)
프로젝트속성 > C/C++ > 언어 > OpenMP 지원 > 예

6 )시스템환경변수설정
CUDA_HOME
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1
CUDA_PATH
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1
CUDA_PATH_V12_1
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1
CUDNN_HOME
C:\Program Files\NVIDIA\CUDNN\v9.1\bin\12.4
OpenCV_DIR
C:/opencv/build
OPENCV_ENABLE_TBB
ON
Path
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1\bin
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1\libnvvp
C:\Program Files\NVIDIA\CUDNN\v9.1\bin\12.4
C:\opencv\build\bin
C:\opencv\build\x64\vc16\bin
C:\Qt\6.7.1\msvc2019_64\bin
C:\opencv\build
C:\Program Files (x86)\Intel\oneAPI\tbb\2021.12\bin
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1\bin
TBB_DIR
C:\Program Files (x86)\Intel\oneAPI\tbb\2021.12\bin
TBB_ROOT
C:\Program Files (x86)\Intel\oneAPI\tbb\2021.12\bin

3)Visual Studio 
2022버전으로 cmake, build시 cuda지원불가로 2019버전설치 후 cmake, build
vs_community__f2cf4f3974864621ace5757560120cd1.exe
- 설치시나 visual studio에서 
도구> 도구 및 기능 가져오기 > 개발자용 워크로드 > C++를 사용한 데스크톱 개발 >
MSVC c143 - VS 2022 C++ x64/x86 빌드 도구 등을 체크한 후 설치한다.
(visual studio 종료하고 설치한다.)

- OpenCV Cuda
(구성)cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_BUILD_TYPE="Debug" -B "c:/opencv/build" -S "c:/opencv/sources" -DCMAKE_INSTALL_PREFIX="C:/opencv/install" -DWITH_CUDA=ON -DCUDA_TOOLKIT_ROOT_DIR="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1" -DCMAKE_CUDA_COMPILER="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/nvcc.exe" -DOPENCV_EXTRA_MODULES_PATH="C:/opencv_contrib/modules" -DWITH_NVCUVID=OFF -DWITH_NVCUVENC=OFF -DBUILD_opencv_cudaimgproc=ON "c:/opencv/sources" 
(빌드)cmake --build . --config Debug

cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_BUILD_TYPE="Release" -B "c:/opencv/build" -S "c:/opencv/sources" -DCMAKE_INSTALL_PREFIX="C:/opencv/install" -DWITH_CUDA=ON -DCUDA_TOOLKIT_ROOT_DIR="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1" -DCMAKE_CUDA_COMPILER="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/nvcc.exe" -DOPENCV_EXTRA_MODULES_PATH="C:/opencv_contrib/modules" -DWITH_NVCUVID=OFF -DWITH_NVCUVENC=OFF -DBUILD_opencv_cudaimgproc=ON "c:/opencv/sources"
cmake --build . --config Release

--비디오코덱
cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_BUILD_TYPE="Debug" -B "c:/opencv/build" -S "c:/opencv/sources" -DCMAKE_INSTALL_PREFIX="C:/opencv/install" -DWITH_CUDA=ON -DCUDA_TOOLKIT_ROOT_DIR="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1" -DCMAKE_CUDA_COMPILER="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/nvcc.exe" -DOPENCV_EXTRA_MODULES_PATH="C:/opencv_contrib/modules" -DWITH_NVCUVID=OFF -DWITH_NVCUVENC=OFF -DBUILD_opencv_cudaimgproc=ON -D WITH_NVCUVID=ON -D Video_Codec_SDK_ROOT_DIR="C:/Video_Codec_SDK"  "c:/opencv/sources" 
cmake --build . --config Debug

cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_BUILD_TYPE="Release" -B "c:/opencv/build" -S "c:/opencv/sources" -DCMAKE_INSTALL_PREFIX="C:/opencv/install" -DWITH_CUDA=ON -DCUDA_TOOLKIT_ROOT_DIR="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1" -DCMAKE_CUDA_COMPILER="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/nvcc.exe" -DOPENCV_EXTRA_MODULES_PATH="C:/opencv_contrib/modules" -DWITH_NVCUVID=OFF -DWITH_NVCUVENC=OFF -DBUILD_opencv_cudaimgproc=ON -D WITH_NVCUVID=ON -D Video_Codec_SDK_ROOT_DIR="C:/Video_Codec_SDK"  "c:/opencv/sources" 
cmake --build . --config Release

--병렬처리 TBB/OPENMP/ONETBB
cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_BUILD_TYPE="Debug" -B "c:/opencv/build" -S "c:/opencv/sources" -DCMAKE_INSTALL_PREFIX="C:/opencv/install" -DWITH_CUDA=ON -DCUDA_TOOLKIT_ROOT_DIR="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1" -DCMAKE_CUDA_COMPILER="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/bin/nvcc.exe" -DOPENCV_EXTRA_MODULES_PATH="C:/opencv_contrib/modules" -DWITH_NVCUVID=OFF -DWITH_NVCUVENC=OFF -DBUILD_opencv_cudaimgproc=ON -D WITH_NVCUVID=ON -D Video_Codec_SDK_ROOT_DIR="C:/Video_Codec_SDK"  -DWITH_TBB=ON -DWITH_OPENMP=ON -DWITH_ONETBB=ON  "c:/opencv/sources"
cmake --build . --config Debug

3)CMakeListx.txt
- PS C:\myLab\Project1\Project1\build> cmake -G "Visual Studio 16 2019" ..

cmake_minimum_required(VERSION 3.14)
project(Project1)

# Qt, OpenCV, CUDA 설정
set(CMAKE_PREFIX_PATH "C:/Qt/6.7.1/msvc2019_64" "C:/opencv/build")
find_package(Qt6 REQUIRED COMPONENTS Widgets Core Gui)
find_package(OpenCV REQUIRED COMPONENTS core imgproc highgui cudaarithm cudafilters cudawarping cudacodec cudafeatures2d cudaimgproc)

# CUDA 및 cuDNN 경로 설정
set(CUDA_TOOLKIT_ROOT_DIR "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1")
set(CUDNN_ROOT_DIR "C:/Program Files/NVIDIA/CUDNN/v9.1")

# 추가 포함 디렉터리 설정
include_directories(
    ${CUDA_INCLUDE_DIRS}
    ${CUDNN_INCLUDE_DIRS}
)

# CUDA 파일 설정
set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -std=c++11 --expt-relaxed-constexpr)

# 실행 파일 추가
qt6_wrap_cpp(MOC_FILES
    MainWindow.h
    ImageProcessor.h
)

add_executable(Project1
    main.cpp
    MainWindow.cpp
    MainWindow.h
    MainWindow.ui
    ImageProcessor.cpp
    ImageProcessor.h
    ${MOC_FILES}  # 이전에 생성한 MOC 파일
)

# Qt 및 OpenCV 라이브러리 링크
target_link_libraries(Project1
    Qt6::Widgets
    Qt6::Core
    Qt6::Gui
    ${OpenCV_LIBS}
)

# CUDA 및 cuDNN 라이브러리 링크
target_link_libraries(Project1
    ${CUDA_LIBRARIES}
    ${CUDNN_LIBRARIES}
    ${CUDA_cudart_LIBRARY}
    ${CUDA_cublas_LIBRARY}
    ${CUDA_curand_LIBRARY}
)

# 실행 파일 출력 디렉토리 설정
set_target_properties(Project1 PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/Debug"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/Release"
)

# DLL 복사
# 디버그 빌드에서의 OpenCV opencv_world DLL 복사
add_custom_command(TARGET Project1 POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/x64/vc16/bin/opencv_world4100d.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMENT "Copying OpenCV Debug opencv_world DLL to output directory"
)

# 릴리스 빌드에서의 OpenCV opencv_world DLL 복사
add_custom_command(TARGET Project1 POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/x64/vc16/bin/opencv_world4100.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMENT "Copying OpenCV Release opencv_world DLL to output directory"
)

# 디버그 빌드에서의 OpenCV DLL 복사
add_custom_command(TARGET Project1 POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Debug/opencv_cudaarithm4100d.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Debug/opencv_cudaimgproc4100d.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Debug/opencv_cudafilters4100d.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Debug/opencv_imgcodecs4100d.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Debug/opencv_core4100d.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Debug/opencv_imgproc4100d.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMENT "Copying OpenCV Debug DLLs to output directory"
)

# 릴리스 빌드에서의 OpenCV DLL 복사
add_custom_command(TARGET Project1 POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Release/opencv_cudaarithm4100.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Release/opencv_cudaimgproc4100.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Release/opencv_cudafilters4100.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Release/opencv_imgcodecs4100.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Release/opencv_core4100.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "C:/opencv/build/bin/Release/opencv_imgproc4100.dll" "$<TARGET_FILE_DIR:Project1>"
    COMMENT "Copying OpenCV Release DLLs to output directory"
)

# IPP 헤더 파일 포함
target_include_directories(Project1 PRIVATE
    ${IPP_INCLUDE_DIR}
)

