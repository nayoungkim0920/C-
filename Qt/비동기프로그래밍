<비동기프로그래밍>
동시에 여러 작업을 처리하고, 작업이 완료될 때까지 기다리지 않고 다른 작업을 계속할 수 있는
프로그래밍 방식이다. 성능 향상과 함께 사용자 경험을 개선하고 시스템 자원을 효율저그로
활용할 수 있는 핵심적인 기법이다.

1. 응답성 향상
사용자 인터페이스에서 긴 작업을 수행할 때, 비동기 프로그래밍을 사용하면 UI가 블로킹되지 않고
사용자 입력에 신속하게 응답할 수 잇다. 예를 들어, 이미지 처리 작업이 느릴 수 있는데, 이를
비동기적으로 처리하면 사용자는 다른 작업을 할 수 있고, 동시에 이미지 처리가 백그라운드에서
진행된다.

2. 자원 효율성
비동기 작업을 사용하면 한 번에 여러 작업을 동시에 처리할 수 있어 시스템 자원을 효율적으로 
활용할 수 있다. 예를 들어, 이미지 처리나 데이터베이스 쿼리 같은 작업들을 병렬로 처리하여
전체적인 성능을 개선할 수 있다.

3. 병렬성
멀티코어 프로세서 환경에서 비동기 프로그래밍을 활용하면 여러 코어를 동시에 활용하여 작업을 
병렬로 처리할 수 있다. 이는 특히 대규모 프로젝트에서 높은 성능을 제공할 수 있다.

4. 오류 처리와 예외 상황 대응
비동기 작업에서 발생할 수 있는 예외나 오류를 효과적으로 처리할 수 있다. 예를들어, 네트워크
요청에 타임아웃이 발생하거나 데이터 처리과정에서 예외가 발생할 경우, 비동기 방식을 사용하면
오류를 적절히 처리하고 시스템의 안정성을 높일 수 있다.

5. 대규모 프로젝트 관리
여러 개발자가 동시에 작업을 진행하는 경우가 많다. 비동기 프로그래밍을 적용하면 서로 다른
모듈이나 기능을 독립적으로 개발하고 통합할 수 있다. 이는 코드의 모듈화와 유지보수를 용이하게
만들어준다.

<이미지 & 영상 처리>
1. 시간 소모가 큰 작업
이미지 처리나 영상 처리 작업은 CPU나 GOU에서 상당한 계산을 요구할 수 있다.
이미지 필터링, 특징 추출, 이미지 변환 등의 작업은 대용량 데이터에 대해 많은 시간이 
소요될 수 있다. 이러한 작업을 동기적으로 처리하면 메인 스레드가 블로킹되어 사용자 
인터페이스의 응답성이 저하될 수 있다. 비동기 프로그래밍을 사용하면 이러한 계산 집약적인
작업을 백그라운드에서 처리하고, 동시에 사용자는 애플리케이션을 계속 사용할 수 있다.

2.사용자 경험 향상
사용자는 이미지나 영상을 로드하거나 처리하는 동안 다른 작업을 수행할 수 있어야 한다.
사용자가 이미지를 열고 있는 동안에도 다른 이미지를 로드하거나 애플리케이션의 다른 기능
을 사용할 수 있얻야 한다. 비동기 프로그래밍을 사용하면 이미지 처리 작업이 백그라운드
에서 처리되므로 사용자는 부드러운 사용자 경험을 유지할 수 있다.

3. 다중 이미지 처리
많은 애플리케이션에서는 여러 이미지나 영상을 동시에 처리해야할 때가 있다. 이미지 갤러리
애플리케이션에서 여러 이미지를 동시에 로드하거나 필터링을 적용할 수 있다. 
비동기 프로그래밍을 사용하면 각 이미지를 병렬로 처리하여 전체 처리 시간을 단축할 수 있다.

4. 병렬처리
멀티코어 프로세서를 활용하여 이미지 처리 작업을 병렬로 처리할 수 있다. 이미지 처리 작업은
종종 독립적인 픽셀 또는 영역에 대해 작업을 수행할 수 있어서 병렬성을 높이기에 이상적이다.
비동기 프로그래밍을 사용하면 멀티코어 환경에서 여러 코어를 효율적으로 활용하여 전체적인
성능을 개선할 수 있다.

5. 오류 처리와 안정성
이미지 처리 작업중 예상치 못한 오류가 발생할 수 있다. ㅏ파일이 손상되었거나 데이터가
유효하지 않은 경우 등이 있을 수 있다. 비동기 프로그래밍을 사용하면 이러한 예외 상황을
적절히 처리하고 애플리케이션의 안정성을 높일 수 있다.

6. 네트워크 기반 이미지 처리
클라우드 기반의 이미지 처리 서비스를 사용하는 경우에도 비동기 프로그래밍이 필요할 수 있다.
이미지를 원격 서버로 전송하고 그 서버에서 처리결과를 기다리는 동안에도 애플리케이션은
사용자의 입력을 처리하고 다른작업을 수행할 수 있어야 한다.
