#cmake -G "Visual Studio 16 2019" -DCMAKE_BUILD_TYPE=Debug ..

cmake_minimum_required(VERSION 3.14)
project(Project1 LANGUAGES CXX CUDA)

# BUILD TYPE 설정
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif()
message(STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_TOOLCHAIN_FILE "C:/vcpkg/scripts/buildsystems/vcpkg.cmake" CACHE FILEPATH "Path to vcpkg toolchain file")
set(CMAKE_PREFIX_PATH 
    "C:/vcpkg/packages" 
    "C:/onnxruntime")

# QT 설정
set(Qt6_DIR "C:/Qt/6.7.1/")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${Qt6_DIR}/msvc2019_64/lib/cmake/Qt6") #Find<Module>.cmake
set(CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH};${Qt6_DIR}") #CMakeLists.txt
find_package(Qt6 REQUIRED COMPONENTS Widgets Core Gui)
set(CMAKE_PREFIX_PATH "${Qt6_DIR};${CMAKE_PREFIX_PATH}")
set(Qt6_INCLUDE_DIRS ${Qt6_DIR}/msvc2019_64/include)
set(Qt6_LIB_DIR ${Qt6_DIR}/msvc2019_64/lib)
set(Qt6_LIBRARIES Qt6::Widgets;Qt6::Core;Qt6::Gui)
include_directories(${Qt6_INCLUDE_DIRS})
link_directories(${Qt6_LIB_DIR})
link_libraries(${Qt6_LIBRARIES})
message(STATUS "Qt6_INCLUDE_DIRS: ${Qt6_INCLUDE_DIRS}")
message(STATUS "Qt6_LIB_DIR: ${Qt6_LIB_DIR}")
message(STATUS "Qt6_LIBRARIES: ${Qt6_LIBRARIES}")

# OpenCV 설정
set(OpenCV_DIR "C:/opencv")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${OpenCV_DIR}/sources/cmake") #Find<Module>.cmake
set(CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH};${OpenCV_DIR}") #CMakeLists.txt
#find_package(OpenCV REQUIRED COMPONENTS core imgproc highgui dnn features2d calib3d imgcodecs ml video videoio objdetect opencv_photo)
find_package(OpenCV REQUIRED) 
set(OpenCV_LIBRARIES 
    cudaarithm cudaimgproc cudafilters imgcodecs core imgproc dnn 
    cudawarping cudacodec cudabgsegm cudafeatures2d cudalegacy features2d calib3d ml 
    video videoio objdetect photo ${OpenCV_LIBRARIES}
)
set(CMAKE_PREFIX_PATH "${OpenCV_DIR};${CMAKE_PREFIX_PATH}")
set(OpenCV_INCLUDE_DIRS "${OpenCV_DIR}/install/include" "${OpenCV_DIR}/include" "${OpenCV_INCLUDE_DIRS}")
set(OpenCV_LIB_DIR "${OpenCV_DIR}/lib/${CMAKE_BUILD_TYPE}")
set(OpenCV_BIN_DIR "${OpenCV_DIR}/x64/vc16/bin")
set(OpenCV_BIN_DIR_TYPE "${OpenCV_DIR}/bin/${CMAKE_BUILD_TYPE}")
set(OpenCV_LIB_ALL ${OpenCV_LIBRARIES};${OpenCV_LIBS})

set(OpenCV_LINK_LIBS "")
set(OpenCV_DLLS "")
foreach(lib ${OpenCV_LIB_ALL})    
    if(CMAKE_BUILD_TYPE MATCHES Debug)
        if("${OpenCV_DLLS}" STREQUAL "")
            list(APPEND OpenCV_LINK_LIBS ${OpenCV_BIN_DIR}/opencv_world4100d.lib)
            list(APPEND OpenCV_DLLS ${OpenCV_BIN_DIR}/opencv_world4100d.dll)
        endif()
        if(${lib} MATCHES "^opencv_")
            list(APPEND OpenCV_LINK_LIBS "${lib}4100d.lib")
            list(APPEND OpenCV_DLLS "${OpenCV_BIN_DIR_TYPE}/${lib}4100d.dll")
        else()
            list(APPEND OpenCV_LINK_LIBS "opencv_${lib}4100d.lib")
            list(APPEND OpenCV_DLLS "${OpenCV_BIN_DIR_TYPE}/opencv_${lib}4100d.dll")
        endif()
    else()
        if("${OpenCV_DLLS}" STREQUAL "")
            list(APPEND OpenCV_LINK_LIBS ${OpenCV_BIN_DIR}/opencv_world4100.lib)
            list(APPEND OpenCV_DLLS ${OpenCV_BIN_DIR}/opencv_world4100.dll)
        endif()
        if(${lib} MATCHES "^opencv_")
            list(APPEND OpenCV_LINK_LIBS "${lib}4100.lib")
            list(APPEND OpenCV_DLLS "${OpenCV_BIN_DIR_TYPE}/${lib}4100.dll")
        else()
            list(APPEND OpenCV_LINK_LIBS "opencv_${lib}4100.lib")
            list(APPEND OpenCV_DLLS "${OpenCV_BIN_DIR_TYPE}/opencv_${lib}4100.dll")
        endif()
    endif()      
endforeach()
#foreach(lib1 ${OpenCV_LINK_LIBS})
#    message(STATUS "${lib1}")
#endforeach()
#foreach(lib2 ${OpenCV_DLLS})
#    message(STATUS "${lib2}")
#endforeach()
include_directories(${OpenCV_INCLUDE_DIRS})
link_directories(${OpenCV_LIB_DIR} ${OpenCV_LIB_DIR_DEBUG} ${OpenCV_LIB_DIR_RELEASE})
link_libraries(${OpenCV_LINK_LIBS} ${OpenCV_DLLS})
message(STATUS "OpenCV_INCLUDE_DIRS: ${OpenCV_INCLUDE_DIRS}")
message(STATUS "OpenCV_LIB_DIR: ${OpenCV_LIB_DIR}")
message(STATUS "OpenCV_LINK_LIBS: ${OpenCV_LINK_LIBS}")

# CUDA 설정"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1\lib\cmake\thrust\FindTBB.cmake"
set(CUDAToolkit_DIR "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CUDAToolkit_DIR}/lib/cmake") #Find<Module>.cmake
set(CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH};${CUDAToolkit_DIR}") #CMakeLists.txt
find_package(CUDAToolkit REQUIRED)
set(CUDAToolkit_LIBRARIES 
    cudaarithm cudafilters cudawarping cudacodec cudafeatures2d cudaimgproc cudart_static cuda
    CUDA::cudart CUDA::cuda_driver CUDA::nvrtc CUDA::cublas CUDA::curand CUDA::cufft
)
# ${CUDAToolkit_INCLUDE_DIRS} C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/include
set(CUDAToolkit_LIB_DIR "${CUDAToolkit_DIR}/lib/x64")
set(CUDA_NVCC_EXECUTABLE "${CUDAToolkit_DIR}/bin/nvcc.exe")
set(CUDA_ARCHITECTURES "89")
set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -std=c++20 --expt-relaxed-constexpr -gencode arch=compute_89,code=sm_89)
#set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -std=c++20 --expt-relaxed-constexpr) # -gencode : torch의 TORCH_CUDA_ARCH_LIST과 함깨 사용하지 말것
include_directories("${CUDAToolkit_INCLUDE_DIRS}")
link_directories("${CUDAToolkit_LIB_DIR}")
link_libraries("${CUDAToolkit_LIBRARIES}")
message(STATUS "CUDAToolkit_INCLUDE_DIRS: ${CUDAToolkit_INCLUDE_DIRS}")
message(STATUS "CUDAToolkit_LIB_DIR: ${CUDAToolkit_LIB_DIR}")
message(STATUS "CUDAToolkit_LIBRARIES: ${CUDAToolkit_LIBRARIES}")




# CUDNN 설정
set(CUDNN_DIR "C:/Program Files/NVIDIA/CUDNN/v9.1")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CUDNN_DIR}/cmake") #Find<Module>.cmake
set(CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH};${CUDNN_DIR}") #CMakeLists.txt
#find_package(CUDNN REQUIRED) -- error occured
set(USE_CUDNN ON CACHE BOOL "Use CUDNN for deep learning") 
set(cuDNN_INCLUDE_DIR "${CUDNN_DIR}/include/12.4")
set(CUDNN_BIN "${CUDNN_DIR}/bin/12.4" ${CUDNN_BIN})
set(cuDNN_LIB_DIR "${CUDNN_DIR}/lib/12.4/x64" ${cuDNN_LIB_DIR})
set(cuDNN_LIBRARY "${CUDNN_DIR}/lib/12.4/x64/cudnn.lib" ${cuDNN_LIBRARY})
set(CUDNN_LIBRARIES "${CUDNN_DIR}/lib/12.4/x64/cudnn.lib" ${CUDNN_LIBRARIES})
include_directories("${cuDNN_INCLUDE_DIR}")
link_directories("${cuDNN_LIB_DIR}")
link_libraries("${CUDNN_LIBRARIES}")
message(STATUS "USE_CUDNN : ${USE_CUDNN}")
message(STATUS "CUDNN_INCLUDE_DIR : ${cuDNN_INCLUDE_DIR}") #C:/Program Files/NVIDIA/CUDNN/v9.1/include/12.4;C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1/include
message(STATUS "CUDNN_BIN : ${CUDNN_BIN}") # C:/Program Files/NVIDIA/CUDNN/v9.1/bin/12.4
message(STATUS "cuDNN_LIBRARY : ${cuDNN_LIBRARY}") #C:/Program Files/NVIDIA/CUDNN/v9.1/lib/12.4/x64
message(STATUS "CUDNN_LIBRARIES : ${CUDNN_LIBRARIES}") #C:/Program Files/NVIDIA/CUDNN/v9.1/lib/12.4/x64/cudnn.lib


# GStreamer 설정
set(GSTREAMER_DIR "C:/gstreamer/1.0/msvc_x86_64")
#set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${GSTREAMER_DIR}/cmake") #Find<Module>.cmake --cmake 폴더 없음
set(CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH};${GSTREAMER_DIR}") #CMakeLists.txt
find_package(GStreamer REQUIRED) # 호출패이키명의 대소문자를 확실히 입력
# C:/gstreamer/1.0/msvc_x86_64/include/gstreamer-1.0;C:/gstreamer/1.0/msvc_x86_64/include/glib-2.0;C:/gstreamer/1.0/msvc_x86_64/lib/glib-2.0/include
set(GLIB2_INCLUDE_DIRS "${GSTREAMER_DIR}/include/glib-2.0") #C:/gstreamer/1.0/msvc_x86_64/include/glib-2.0
set(GLIB2_LIBRARIES "${GSTREAMER_DIR}/lib/glib-2.0.lib") #C:/gstreamer/1.0/msvc_x86_64/lib/glib-2.0.lib
set(GTHREAD2_LIBRARIES "${GSTREAMER_DIR}/lib/gthread-2.0.lib") #C:/gstreamer/1.0/msvc_x86_64/lib/gthread-2.0.lib
set(GSTREAMER_INCLUDE_DIRS "${GSTREAMER_DIR}/include/gstreamer-1.0" "${GSTREAMER_DIR}/include/glib-2.0" "${GSTREAMER_DIR}/lib/glib-2.0/include" ${GSTREAMER_INCLUDE_DIRS} ${GLIB2_INCLUDE_DIRS})
set(GSTREAMER_LIB_DIRS "${GSTREAMER_DIR}/lib") #C:/gstreamer/1.0/msvc_x86_64/lib
set(GSTREAMER_LIBRARIES gstreamer-1.0 gobject-2.0.lib glib-2.0.lib gstapp-1.0.lib gstbase-1.0.lib gstvideo-1.0.lib ${GLIB2_LIBRARIES} ${GTHREAD2_LIBRARIES})
include_directories(${GSTREAMER_INCLUDE_DIRS})
link_directories(${GSTREAMER_LIB_DIRS})
link_libraries(${GSTREAMER_LIBRARIES})
# GLib 및 GThread 라이브러리를 찾고 연결
#find_library(TMP_VALUE NAMES glib-2.0 PATHS ${GSTREAMER_LIB_DIRS}) # C:/gstreamer/1.0/msvc_x86_64/lib/glib-2.0.lib
message(STATUS "GLIB2_INCLUDE_DIRS : ${GLIB2_INCLUDE_DIRS}")
message(STATUS "GLIB2_LIBRARIES : ${GLIB2_LIBRARIES}")
message(STATUS "GTHREAD2_LIBRARIES : ${GTHREAD2_LIBRARIES}")
message(STATUS "GSTREAMER_INCLUDE_DIRS : ${GSTREAMER_INCLUDE_DIRS}")
message(STATUS "GSTREAMER_LIB_DIRS : ${GSTREAMER_LIB_DIRS}")
message(STATUS "GSTREAMER_LIBRARIES : ${GSTREAMER_LIBRARIES}")
if(NOT GLIB2_LIBRARIES)
    message(FATAL_ERROR "Could not find GLIB2_LIBRARIES")
endif()
if(NOT GTHREAD2_LIBRARIES)
    message(FATAL_ERROR "Could not find GTHREAD2_LIBRARIES")
endif()



# LibTorch 설정
set(Torch_DIR "C:/libtorch")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${Torch_DIR}/cmake" "${Torch_DIR}/libtorch/share/cmake") #Find<Module>.cmake --cmake 폴더 없음
set(CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}" "${Torch_DIR}") #CMakeLists.txt
find_package(Torch REQUIRED)
#CUDA 아키텍처 플래그를 설정
set(TORCH_CUDA_ARCH_LIST "8.9") # NVIDIA GeForce RTX 4060 8.9 Ada Lovelace 아키텍처를 기반 compute capability 8.9를 지원
#cuda_select_nvcc_arch_flags(ARCH_FLAGS ${TORCH_CUDA_ARCH_LIST}) 지원하지않아
#C:\libtorch\share\cmake\Caffe2\public\utils.cmake 수정
#cuda_select_nvcc_arch_flags(${store_var} ${TORCH_CUDA_ARCH_LIST})
# => set(TORCH_CUDA_ARCH_LIST ${TORCH_CUDA_ARCH_LIST})
set(Torch_INCLUDE_DIRS "${Torch_DIR}/include" "${Torch_DIR}/libtorch/include" "${Torch_INCLUDE_DIRS}")
set(Torch_BIN "${Torch_DIR}/bin" "${Torch_DIR}/lib")
set(Torch_LIB_DIR "${Torch_DIR}/lib" "${Torch_LIB_DIR}")
set(Torch_LIBRARY "${Torch_DIR}/lib/torch.lib" ${Torch_LIBRARY})
set(Torch_LIBRARIES "${Torch_DIR}/lib/torch.lib" ${Torch_LIBRARIES})
include_directories("${Torch_INCLUDE_DIRS}")
link_directories("${Torch_LIB_DIR}")
link_libraries("${Torch_LIBRARIES}")
message(STATUS "Torch_DIR : ${Torch_DIR}")
message(STATUS "Torch_INCLUDE_DIRS : ${Torch_INCLUDE_DIRS}")
message(STATUS "Torch_BIN : ${Torch_BIN}")
message(STATUS "Torch_LIB_DIR : ${Torch_LIB_DIR}")
message(STATUS "Torch_LIBRARY : ${Torch_LIBRARY}")
message(STATUS "Torch_LIBRARIES : ${Torch_LIBRARIES}")


# flatbuffers 설정
set(FLATBUFFERS_DIR "C:/flatbuffers")
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${FLATBUFFERS_DIR}/Cmake") #Find<Module>.cmake --cmake 폴더 없음
set(CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}" "${FLATBUFFERS_DIR}") #CMakeLists.txt
set(FLATBUFFERS_BIN "${FLATBUFFERS_DIR}/build/${CMAKE_BUILD_TYPE}")
set(FLATBUFFERS_FLATC_EXECUTABLE "${FLATBUFFERS_BIN}/flatc.exe") #find_package 이전에 설정할것
find_package(FlatBuffers REQUIRED)
set(FLATBUFFERS_INCLUDE_DIRS "${FLATBUFFERS_DIR}/include" "${FLATBUFFERS_INCLUDE_DIRS}")
set(FLATBUFFERS_LIB_DIR "${FLATBUFFERS_DIR}/build/${CMAKE_BUILD_TYPE}" "${FLATBUFFERS_LIB_DIR}")
set(FLATBUFFERS_LIBRARY "${FLATBUFFERS_DIR}/build/${CMAKE_BUILD_TYPE}/flatbuffers.lib" ${FLATBUFFERS_LIBRARY})
set(FLATBUFFERS_LIBRARIES "${FLATBUFFERS_DIR}/build/${CMAKE_BUILD_TYPE}/flatbuffers.lib" ${FLATBUFFERS_LIBRARIES})
include_directories("${FLATBUFFERS_INCLUDE_DIR}")
link_directories("${FLATBUFFERS_LIB_DIR}")
link_libraries("${FLATBUFFERS_LIBRARIES}")
message(STATUS "FLATBUFFERS_DIR : ${FLATBUFFERS_DIR}")
message(STATUS "FLATBUFFERS_INCLUDE_DIRS : ${FLATBUFFERS_INCLUDE_DIRS}")
message(STATUS "FLATBUFFERS_BIN : ${FLATBUFFERS_BIN}")
message(STATUS "FLATBUFFERS_LIB_DIR : ${FLATBUFFERS_LIB_DIR}")
message(STATUS "FLATBUFFERS_LIBRARY : ${FLATBUFFERS_LIBRARY}")
message(STATUS "FLATBUFFERS_LIBRARIES : ${FLATBUFFERS_LIBRARIES}")



# tensorflow 설정
# 헤더 파일 경로 포함
#set(tensorflow_ROOT_DIR "C:/tensorflow")
#include_directories(
#    ${tensorflow_ROOT_DIR}
#    "${tensorflow_ROOT_DIR}/third_party/xla"
#    "${tensorflow_ROOT_DIR}/third_party/eigen3")
# 라이브러리 생성
#set(tensorflow_SOURCES
#    ${tensorflow_ROOT_DIR}/tensorflow/core/util/proto/proto_utils.cc
#    ${tensorflow_ROOT_DIR}/tensorflow/core/framework/shape_inference.cc
#)
#add_library(tensorflow_util_proto ${tensorflow_SOURCES})

# ONNX 설정

set(ONNX_ROOT "C:/onnx")
set(CMAKE_PREFIX_PATH "${ONNX_DIR};${CMAKE_PREFIX_PATH}")
set(onnx_DIR "${ONNX_ROOT}/build") # ONNXConfig.cmake
set(onnx_proto "${ONNX_ROOT}/onnx")
include_directories("${ONNX_ROOT}")
link_directories("${ONNX_ROOT}/build/lib/pkgconfig")

# Protobuf 설정 버전 4.25.1
set(Protobuf_INCLUDE_DIR "C:/protobuf/src")
find_package(Protobuf REQUIRED)
include_directories(${PROTOBUF_INCLUDE_DIRS})
link_directories(${PROTOBUF_LIBRARY_DIRS})

# GSL 설정 추가
set(GSL_ROOT "${CMAKE_PREFIX_PATH}/gsl_x64-windows")
set(GSL_INCLUDE_DIR "${GSL_ROOT}/include")
set(GSL_LIBRARY "${GSL_ROOT}/lib")
set(GSL_CBLAS_LIBRARY "${GSL_LIBRARY}/gslcblas.lib")
find_package(GSL REQUIRED)
include_directories(${GSL_INCLUDE_DIRS})
link_directories(${GSL_LIBRARY_DIRS})


# ONNX Runtime 설정
set(ONNX_RUNTIME_ROOT "C:/onnxruntime")
set(onnxruntime_dir "${ONNX_RUNTIME_ROOT}/build/Debug")
set(onnxruntime_include_dir 
    "${ONNX_RUNTIME_ROOT}"
    "${ONNX_RUNTIME_ROOT}/cmake/build/_deps/safeint-src"
    "${ONNX_RUNTIME_ROOT}/cmake/build/_deps/mp11-src/include"
    "${ONNX_RUNTIME_ROOT}/cmake/build/_deps/onnx-src/onnx"
    "${ONNX_RUNTIME_ROOT}/cmake/build"
    "${ONNX_RUNTIME_ROOT}/build"
    "${ONNX_RUNTIME_ROOT}/onnxruntime"
    "${ONNX_RUNTIME_ROOT}/build/_deps/mp11-src/include"
    "${ONNX_RUNTIME_ROOT}/build/_deps/safeint-src"
    "${ONNX_RUNTIME_ROOT}/include/onnxruntime"
    "${ONNX_RUNTIME_ROOT}/include/onnxruntime/core/session")
include_directories("${onnxruntime_include_dir}")
link_directories("${onnxruntime_dir}")

# Vulkan 설정
set(Vulkan_SDK "C:/VulkanSDK/1.3.290.0")
set(Vulkan_BIN "${Vulkan_SDK}/Bin")
set(Vulkan_INCLUDE_DIR "${Vulkan_SDK}/Include")
set(Vulkan_LIBRARY "${Vulkan_SDK}/Lib")
find_package(Vulkan REQUIRED)
message(STATUS "Vulkan INCLUDE found: ${Vulkan_INCLUDE_DIRS}")
message(STATUS "Vulkan LIBRARY found: ${Vulkan_LIBRARIES}")
find_program(GLSLC_EXECUTABLE glslc PATHS ${Vulkan_BIN} NO_DEFAULT_PATH)
find_program(GLSLANGVALIDATOR_EXECUTABLE glslangValidator PATHS ${Vulkan_BIN} NO_DEFAULT_PATH)
if(NOT GLSLC_EXECUTABLE)
    message(FATAL_ERROR "glslc executable not found. Please ensure Vulkan SDK is installed correctly.")
endif()
if(NOT GLSLANGVALIDATOR_EXECUTABLE)
    message(FATAL_ERROR "glslangValidator executable not found. Please ensure Vulkan SDK is installed correctly.")
endif()
message(STATUS "glslc found: ${GLSLC_EXECUTABLE}")
message(STATUS "glslangValidator found: ${GLSLANGVALIDATOR_EXECUTABLE}")

# IPP 설정
set(IPP_ROOT "C:/Program Files (x86)/Intel/oneAPI/ipp/2021.11")
include_directories("${IPP_ROOT}/include")
link_directories("${IPP_ROOT}/lib")



# IPLIB 설정
set(IPLIB_ROOT "C:/myLab/Project1/Project1/imageProcessingLib")
set(IPLIB_LIBRARY "${IPLIB_ROOT}/build/${CMAKE_BUILD_TYPE}/imageProcessingLib.lib")
set(IPLIB_DLL "${IPLIB_ROOT}/build/${CMAKE_BUILD_TYPE}/imageProcessingLib.dll")
include_directories("${IPLIB_ROOT}")
link_directories(
    "${IPLIB_ROOT}/build/bin/${CMAKE_BUILD_TYPE}" #imageProcessingLib.lib
    "${IPLIB_ROOT}/build/lib/${CMAKE_BUILD_TYPE}" #imageProcessingLib.lib
)
link_libraries("${IPLIB_LIBRARY}")

# Abseil 라이브러리 설정
# Google이 개발하고 관리하는 오픈 소스 C++ 라이브러리
set(ABSEIL_ROOT "C:/abseil-cpp")
include_directories("${ABSEIL_ROOT}")
link_directories("${ABSEIL_ROOT}/build/lib")


# date 설정
set(DATE_ROOT "C:/date")
set(DATE_INCLUDE_DIR "${DATE_ROOT}/build/${CMAKE_BUILD_TYPE}")
include_directories("${DATE_ROOT}/include")
link_directories("${DATE_INCLUDE_DIR}")



# cuSPARSELt 설정
set(USE_CUSPARSELT ON CACHE BOOL "Use USE_CUSPARSELT")
message(STATUS "USE_CUSPARSELT: ${USE_CUSPARSELT}")
set(CUSPARSELT_INCLUDE_DIR "${CUDA_TOOLKIT_INCLUDE_DIR}")
set(CUSPARSELT_LIB_DIR "${CUDA_TOOLKIT_LIB_DIR}")
set(CUSPARSELT_LIBRARY "${CUDA_TOOLKIT_LIB_DIR}/cusparse.lib")



# Thread 설정
find_package(Threads REQUIRED)

# CAFFE2 설정
set(CAFFE2_USE_CUDNN ON CACHE BOOL "Use cuDNN in Caffe2")
message(STATUS "CAFFE2_USE_CUDNN: ${CAFFE2_USE_CUDNN}")
if(CAFFE2_USE_CUDNN)
  message(STATUS "cuDNN is enabled for Caffe2.")
else()
  message(STATUS "cuDNN is not enabled for Caffe2.")
endif()

# Qt 래핑 파일 생성
qt6_wrap_cpp(MOC_FILES
    MainWindow.h
    ImageProcessor.h
)

# 실행 파일 추가
add_executable(Project1
    main.cpp
    MainWindow.cpp
    MainWindow.h
    MainWindow.ui
    ImageProcessor.cpp
    ImageProcessor.h
    ImageProcessing.cu
    ImageProcessing.cuh
    ${MOC_FILES}
)



target_link_libraries(Project1

    ${Qt6_LIBRARIES}

    ${OpenCV_LINK_LIBS}

    ${GSTREAMER_LIBRARIES}

    ${TORCH_LIBRARIES}

    flatbuffers

    ${ONNX_RUNTIME_LIB}  # ONNX Runtime 라이브러리

    ${ONNX_LIB}  # ONNX 라이브러리

    ${Protobuf_LIB}  # Protobuf 라이브러리

    ${CUDAToolkit_LIBRARIES}  # CUDA Toolkit 라이브러리

    ${CUDNN_LIBRARIES}  # cuDNN 라이브러리

    ippcc.lib
    ippcore.lib
    ippvm.lib
    ipps.lib
    ippi.lib
    ippcv.lib  # Intel IPP 라이브러리

    nppc
    nppial
    nppicc
    nppidei
    nppif
    nppig
    nppim
    nppist
    nppisu
    nppitc
    npps  # NVIDIA Performance Primitives (NPP) 라이브러리

    Threads::Threads  # POSIX 스레드 라이브러리

    ${IPLIB_LIBRARY}  # 사용자 정의 라이브러리 (경로가 명시된 라이브러리)
)

# CUDA 아키텍처 플래그 적용
target_compile_options(Project1 PRIVATE ${ARCH_FLAGS})

# 파일 인코딩 설정 추가
add_compile_options("$<$<CXX_COMPILER_ID:MSVC>:/utf-8>")

# OpenMP 설정
find_package(OpenMP REQUIRED)
if(OpenMP_CXX_FOUND)
    target_link_libraries(Project1 OpenMP::OpenMP_CXX)
endif()

file(COPY ${IPLIB_DLL}
     DESTINATION "${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}"
)
# C:/myLab/Project1/Project1/build/Debug
message(STATUS "IPLIB_DLL : ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}")

file(COPY ${IPLIB_LIBRARY}
     DESTINATION "${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}"
)
# C:/myLab/Project1/Project1/build/Debug
message(STATUS "IPLIB_LIBRARY : ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}")

#OpenCV DLL COPY
foreach(dll ${OpenCV_DLLS})
    add_custom_command(TARGET Project1 POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "${dll}" "$<TARGET_FILE_DIR:Project1>"
    )
endforeach()

PS C:\onnxruntime\build> cmake -G "Visual Studio 16 2019" -DCMAKE_BUILD_TYPE=Debug ../cmake
CMake Deprecation Warning at CMakeLists.txt:14 (cmake_policy):
  The OLD behavior for policy CMP0104 will be removed from a future version
  of CMake.

  The cmake-policies(7) manual explains that the OLD behaviors of all
  policies are deprecated and that a policy should be set to OLD only under
  specific short-term circumstances.  Projects should be ported to the NEW
  behavior and not rely on setting a policy to OLD.


-- Selecting Windows SDK version 10.0.22621.0 to target Windows 10.0.22631.
-- The C compiler identification is MSVC 19.29.30154.0
-- The CXX compiler identification is MSVC 19.29.30154.0
-- The ASM compiler identification is MSVC
-- Found assembler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Protobuf: C:/protobuf/build/Release/libprotobuf.lib (found version "4.22.0")
CMake Warning (dev) at CMakeLists.txt:75 (include):
  Policy CMP0145 is not set: The Dart and FindDart modules are removed.  Run
  "cmake --help-policy CMP0145" for policy details.  Use the cmake_policy
  command to set the policy and suppress this warning.

This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at C:/Program Files/CMake/share/cmake-3.29/Modules/Dart.cmake:47 (message):
  Policy CMP0145 is not set: The Dart and FindDart modules are removed.  Run
  "cmake --help-policy CMP0145" for policy details.  Use the cmake_policy
  command to set the policy and suppress this warning.
Call Stack (most recent call first):
  CMakeLists.txt:75 (include)
This warning is for project developers.  Use -Wno-dev to suppress it.

-- The ASM_MASM compiler identification is MSVC
-- Found assembler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/ml64.exe
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - not found
-- Found Threads: TRUE
-- Found Patch: C:/Program Files/Git/usr/bin/patch.exe
Patch found: C:/Program Files/Git/usr/bin/patch.exe
Loading Dependencies URLs ...
Loading Dependencies ...
-- Performing Test ABSL_INTERNAL_AT_LEAST_CXX17
-- Performing Test ABSL_INTERNAL_AT_LEAST_CXX17 - Success
-- Performing Test ABSL_INTERNAL_AT_LEAST_CXX20
-- Performing Test ABSL_INTERNAL_AT_LEAST_CXX20 - Failed
-- Abseil source dir:C:/onnxruntime/build/_deps/abseil_cpp-src
# date: USE_SYSTEM_TZ_DB ON
# date: MANUAL_TZ_DB OFF
# date: USE_TZ_DB_IN_DOT OFF
# date: BUILD_SHARED_LIBS OFF
# date: ENABLE_DATE_TESTING OFF
# date: DISABLE_STRING_VIEW OFF
--
-- 3.21.12.0
-- Performing Test protobuf_HAVE_LD_VERSION_SCRIPT
-- Performing Test protobuf_HAVE_LD_VERSION_SCRIPT - Success
-- Found ZLIB: C:/zlib/build/Release/zlib.lib (found version "1.2.12")
CMake Deprecation Warning at C:/onnxruntime/build/_deps/nlohmann_json-src/CMakeLists.txt:1 (cmake_minimum_required):
  Compatibility with CMake < 3.5 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


-- Using the single-header code from C:/onnxruntime/build/_deps/nlohmann_json-src/single_include/
-- Proceeding with version: 23.5.26.0
-- Looking for _strtof_l
-- Looking for _strtof_l - found
-- Looking for _strtoui64_l
-- Looking for _strtoui64_l - found
-- CMAKE_CXX_FLAGS: /DWIN32 /D_WINDOWS /EHsc /Zc:__cplusplus /EHsc /wd26812 -DEIGEN_HAS_C99_MATH -DCPUINFO_SUPPORTED
CMake Deprecation Warning at C:/onnxruntime/build/_deps/pytorch_clog-src/deps/clog/CMakeLists.txt:1 (CMAKE_MINIMUM_REQUIRED):
  Compatibility with CMake < 3.5 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


CMake Warning (dev) at C:/onnxruntime/build/_deps/onnx-src/CMakeLists.txt:107 (find_package):
  Policy CMP0148 is not set: The FindPythonInterp and FindPythonLibs modules
  are removed.  Run "cmake --help-policy CMP0148" for policy details.  Use
  the cmake_policy command to set the policy and suppress this warning.

This warning is for project developers.  Use -Wno-dev to suppress it.

-- Found PythonInterp: C:/Users/nayou/AppData/Local/Programs/Python/Python312/python.exe (found version "3.12.3")
Generated: C:/onnxruntime/build/_deps/onnx-build/onnx/onnx-ml.proto
Generated: C:/onnxruntime/build/_deps/onnx-build/onnx/onnx-operators-ml.proto
Generated: C:/onnxruntime/build/_deps/onnx-build/onnx/onnx-data.proto
--
-- ******** Summary ********
--   CMake version                     : 3.29.3
--   CMake command                     : C:/Program Files/CMake/bin/cmake.exe
--   System                            : Windows
--   C++ compiler                      : C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe
--   C++ compiler version              : 19.29.30154.0
--   CXX flags                         : /DWIN32 /D_WINDOWS /EHsc /Zc:__cplusplus /EHsc /wd26812 -DEIGEN_HAS_C99_MATH -DCPUINFO_SUPPORTED /EHsc /wd26812
--   Build type                        : Debug
--   Compile definitions               : ORT_ENABLE_STREAM;ORT_NO_RTTI;EIGEN_MPL2_ONLY;EIGEN_HAS_CONSTEXPR;EIGEN_HAS_VARIADIC_TEMPLATES;EIGEN_HAS_CXX11_MATH;EIGEN_HAS_CXX11_ATOMIC;EIGEN_STRONG_INLINE=inline;__STDC_FORMAT_MACROS
--   CMAKE_PREFIX_PATH                 :
--   CMAKE_INSTALL_PREFIX              : C:/Program Files (x86)/onnxruntime
--   CMAKE_MODULE_PATH                 : C:/onnxruntime/cmake/external
--
--   ONNX version                      : 1.16.1
--   ONNX NAMESPACE                    : onnx
--   ONNX_USE_LITE_PROTO               : ON
--   USE_PROTOBUF_SHARED_LIBS          : OFF
--   Protobuf_USE_STATIC_LIBS          : ON
--   ONNX_DISABLE_EXCEPTIONS           : OFF
--   ONNX_DISABLE_STATIC_REGISTRATION  : OFF
--   ONNX_WERROR                       : OFF
--   ONNX_BUILD_TESTS                  : OFF
--   ONNX_BUILD_BENCHMARKS             : OFF
--   ONNX_BUILD_SHARED_LIBS            :
--   BUILD_SHARED_LIBS                 : OFF
--
--   Protobuf compiler                 : C:/protobuf/build/Release/protoc.exe
--   Protobuf includes                 : C:/protobuf/build/install/include
--   Protobuf libraries                : C:/protobuf/build/Release/libprotobuf.lib
--   BUILD_ONNX_PYTHON                 : OFF
Finished fetching external dependencies
-- Found Git: C:/Program Files/Git/cmd/git.exe (found version "2.45.1.windows.1")
fatal: detected dubious ownership in repository at 'C:/onnxruntime'
'C:/onnxruntime' is owned by:
        BUILTIN/Administrators (S-1-5-32-544)
but the current user is:
        KIMNAYOOUNG/nayou (S-1-5-21-3734693049-4166439889-937236257-1001)
To add an exception for this directory, call:

        git config --global --add safe.directory C:/onnxruntime
fatal: detected dubious ownership in repository at 'C:/onnxruntime'
'C:/onnxruntime' is owned by:
        BUILTIN/Administrators (S-1-5-32-544)
but the current user is:
        KIMNAYOOUNG/nayou (S-1-5-21-3734693049-4166439889-937236257-1001)
To add an exception for this directory, call:

        git config --global --add safe.directory C:/onnxruntime
CMake Warning at CMakeLists.txt:1649 (message):
  MPI and NCCL are disabled because build is on Windows or USE_NCCL is set to
  OFF.


-- Configuring done (31.3s)
-- Generating done (12.9s)
-- Build files have been written to: C:/onnxruntime/build

Deprecated CMake 정책 경고:

cmake_policy 관련 경고가 몇 가지 나타납니다. 이는 특정 CMake 정책이 향후 버전에서 지원되지 않거나 변경될 예정이라는 경고입니다.
예를 들어, CMP0104, CMP0145, CMP0148 등의 정책이 포함되어 있습니다. 이는 프로젝트 유지 관리자가 새로운 정책을 사용하도록 코드를 업데이트해야 한다는 의미입니다.
경고: FindDart 모듈 제거:

Dart 및 FindDart 모듈이 제거되었으며, 관련된 정책이 설정되지 않았다는 경고입니다. 이는 현재 사용 중인 CMakeLists.txt 파일이 오래된 모듈을 참조하고 있다는 것을 의미합니다.
Git 소유권 문제:

Git 리포지토리에서 dubious ownership(의심스러운 소유권) 문제가 발생했습니다. 현재 사용자와 리포지토리의 소유자가 다르기 때문에 발생하는 문제입니다.
이 문제를 해결하려면 아래 명령어를 사용하여 해당 디렉터리를 안전한 디렉터리로 설정할 수 있습니다:
bash
코드 복사
git config --global --add safe.directory C:/onnxruntime

Windows에서 MPI와 NCCL 비활성화:

MPI와 NCCL이 Windows에서는 비활성화되었음을 알리는 메시지가 있습니다. 이는 Windows 환경에서의 제한 사항을 나타냅니다.

PS C:\onnxruntime\build> cmake -G "Visual Studio 16 2019" -DCMAKE_BUILD_TYPE=Debug ../cmake
-- Selecting Windows SDK version 10.0.22621.0 to target Windows 10.0.22631.
CMake Error at CMakeLists.txt:80 (include):
  include could not find requested file:

    Dart
PS C:\> git clone https://github.com/dart-lang/sdk.git
"C:\onnxruntime\cmake\CMakeLists.txt" 수정
# cmake_policy(SET CMP0104 OLD) # 권장되지 않음
# 추가
cmake_policy(SET CMP0104 NEW)
cmake_policy(SET CMP0145 NEW)
cmake_policy(SET CMP0148 NEW)
# Set Dart SDK root 추가
set(DART_ROOT "C:/Dart")

Debug 폴더 생성 안되는 현상
PS C:\onnxruntime\build> Remove-Item -Recurse -Force C:/onnxruntime/build/CMakeCache.txt
PS C:\onnxruntime\build> Remove-Item -Recurse -Force C:/onnxruntime/build/CMakeFiles
PS C:\onnxruntime> Remove-Item -Recurse -Force C:/onnxruntime/build
PS C:\onnxruntime> New-Item -ItemType Directory -Path C:/onnxruntime/build
    디렉터리: C:\onnxruntime
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----      2024-08-24   오전 7:05                build

PS C:\onnxruntime> cd build
PS C:\onnxruntime\build> cmake -G "Visual Studio 16 2019" ../cmake
"C:\onnxruntime\build\onnxruntime.sln" -> Visual Studio 2019 로 열기 한 후 디버그 모드/릴리즈 모드로 빌드하면 
C:\onnxruntime\build\Debug, C:\onnxruntime\build\Relase 폴더 생성됨

CMake Error at C:/opencv/sources/cmake/FindONNX.cmake:1 (ocv_clear_vars):
  Unknown CMake command "ocv_clear_vars".
Call Stack (most recent call first):
  CMakeLists.txt:267 (find_package)
"C:\opencv\sources\cmake\FindONNX.cmake" 수정
#ocv_clear_vars(HAVE_ONNX) #주석처리
# if(NOT HAVE_ONNX) 주석처리
#  ocv_clear_vars(HAVE_ONNX ORT_LIB ORT_INCLUDE_DIR)
# endif()
# 추가
if(NOT HAVE_ONNX)
  # 수동으로 변수 초기화
  set(HAVE_ONNX)
  set(ORT_LIB)
  set(ORT_INCLUDE_DIR)
endif()
PS C:\onnx\build> cmake -G "Visual Studio 16 2019" -DCMAKE_BUILD_TYPE=Debug ..
PS C:\onnx\build> cmake -G "Visual Studio 16 2019" -DCMAKE_BUILD_TYPE=Release ..
C:\onnx\build에 Debug or Relase 폴더가 생성되지않으면 Visual Studio 2019로 sln파일 열어서
Debug, Relase 모드로 빌드를 해주면 생성이 된다.

gsl 재설치(깃 주소 오류)
GNU Scientific Library (GSL)은 다양한 수학 및 과학 계산을 위한 라이브러리
MSYS2 MinGW 64-bit 쉘을 열고 다음 명령어를 실행하여 패키지를 업데이트
cd /c/
패키지를 업데이트
pacman -Syu
MinGW-w64 및 필요한 도구를 설치
pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-make
깃 설치
pacman -S git
깃 로그인
아이디 입력, 패스워드에 Personal Access Token 생성해서 붙여넣기
GitHub에서 Personal Access Token 생성
[순서]
GitHub 계정에 로그인합니다.
우측 상단 프로필 아이콘을 클릭하고 Settings로 이동합니다.
Developer settings를 클릭하고, 왼쪽 메뉴에서 Personal access tokens > **Tokens (classic)**를 선택합니다.
Generate new token 버튼을 클릭합니다.
토큰에 이름을 지정하고, repo (모든 리포지토리에 대한 액세스 권한)와 read
(조직 정보 읽기 권한)와 같은 필요한 권한을 선택합니다.
토큰의 유효 기간을 선택한 후 Generate token 버튼을 클릭합니다.
생성된 토큰을 복사합니다. 이 토큰은 다시 표시되지 않으므로 안전한 곳에 저장하세요.
Git 명령어로 Personal Access Token 사용
GSL 리포지토리를 클론할 때 사용자 이름 대신 GitHub 사용자 이름을 입력하고, 
비밀번호 대신 Personal Access Token을 입력합니다.
다시 클론 명령어를 실행한 후:
git clone https://github.com/gnu/gsl.git
Username for 'https://github.com': 프롬프트가 나오면 GitHub 사용자 이름을 입력합니다.
Password for 'https://<your-email>@github.com': 프롬프트가 나오면, 
복사한 Personal Access Token을 붙여넣습니다.
nayou@kimnayooung MINGW64 /c
# git clone https://github.com/ampl/gsl.git
nayou@kimnayooung MINGW64 /c
# git clone https://github.com/ampl/gsl.git
'gsl'에 복제합니다...
remote: Enumerating objects: 5373, done.
remote: Counting objects: 100% (1071/1071), done.
remote: Compressing objects: 100% (529/529), done.
remote: Total 5373 (delta 576), reused 921 (delta 506), pack-reused 4302 (from 1)
오브젝트를 받는 중: 100% (5373/5373), 13.89 MiB | 10.35 MiB/s, 완료.
델타를 알아내는 중: 100% (2921/2921), 완료.
warning: Clone succeeded, but checkout failed.
You can inspect what was checked out with 'git status'
and retry with 'git restore --source=HEAD :/'
nayou@kimnayooung MINGW64 /c/gsl
# git restore --source=HEAD :/

nayou@kimnayooung MINGW64 /c/gsl
# git config --system core.longpaths true

nayou@kimnayooung MINGW64 /c/gsl
# git reset --hard HEAD
Updating files: 100% (2290/2290), 완료.
HEAD의 현재 위치는 60539d2입니다 Docs: replace direct link by reference
cd /c/
rm -rf gsl
git clone https://github.com/ampl/gsl.git
설치완료
CMake Error at ampl/CMakeLists.txt:6 (add_subdirectory):
  The source directory

    C:/gsl/ampl/thirdparty/asl

  does not contain a CMakeLists.txt file.


CMake Error at ampl/CMakeLists.txt:7 (add_to_folder):
  Unknown CMake command "add_to_folder".

nayou@kimnayooung MINGW64 /c/gsl
# git submodule update --init --recursive
'ampl/thirdparty/asl' 경로에 대해 'ampl/thirdparty/asl' (https://github.com/ampl/asl.git) 하위 모듈 등록
'/c/gsl/ampl/thirdparty/asl'에 복제합니다...
Submodule path 'ampl/thirdparty/asl': checked out 'dd1c4c4e5647ead51169caad280c36a88d0f0237'
"C:\gsl\CMakeLists.txt"
"C:\gsl\ampl\thirdparty\asl\CMakeLists.txt"
두파일의 CMake 버전 에러 -> 3.5로 변경
Debug, Release로 visual studio  2019로 빌드

CMake Error at C:/Program Files/CMake/share/cmake-3.29/Modules/FindPackageHandleStandardArgs.cmake:230 (message):
  Could NOT find GSL (missing: GSL_INCLUDE_DIR GSL_LIBRARY GSL_CBLAS_LIBRARY)
  (found version "")
Call Stack (most recent call first):
  C:/Program Files/CMake/share/cmake-3.29/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE)
  C:/Program Files/CMake/share/cmake-3.29/Modules/FindGSL.cmake:151 (find_package_handle_standard_args)
  CMakeLists.txt:337 (find_package)
#find_package(GSL REQUIRED) 주석처리 후 성공

date date.lib 생성안돼서 재설치
c:/date 삭제
C:\>git clone https://github.com/HowardHinnant/date.git
Cloning into 'date'...
remote: Enumerating objects: 3989, done.
remote: Counting objects: 100% (334/334), done.
remote: Compressing objects: 100% (139/139), done.
remote: Total 3989 (delta 178), reused 254 (delta 155), pack-reused 3655 (from 1)
Receiving objects: 100% (3989/3989), 3.31 MiB | 10.51 MiB/s, done.
Resolving deltas: 100% (2556/2556), done.
C:\date\build>cmake -G "Visual Studio 16 2019" -DCMAKEBUILD_TYPE=Debug ..
C:\date\build>cmake -G "Visual Studio 16 2019" -DCMAKEBUILD_TYPE=Debug ..
-- Selecting Windows SDK version 10.0.22621.0 to target Windows 10.0.22631.
-- The C compiler identification is MSVC 19.29.30154.0
-- The CXX compiler identification is MSVC 19.29.30154.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
# date: USE_SYSTEM_TZ_DB OFF
# date: MANUAL_TZ_DB OFF
# date: USE_TZ_DB_IN_DOT OFF
# date: BUILD_SHARED_LIBS OFF
# date: ENABLE_DATE_TESTING OFF
# date: DISABLE_STRING_VIEW OFF
-- Configuring done (6.8s)
-- Generating done (0.0s)
CMake Warning:
  Manually-specified variables were not used by the project:

    CMAKEBUILD_TYPE


-- Build files have been written to: C:/date/build
C:\date\build>cmake --build . --config=Debug
.NET Framework용 Microsoft (R) Build Engine 버전 16.11.2+f32259642
Copyright (C) Microsoft Corporation. All rights reserved.

  1>Checking Build System
  Building Custom Rule C:/date/CMakeLists.txt

date.lib 생성안됨
"C:\date\CMakeLists.txt" 분석
BUILD_TZ_LIB 옵션이 켜져야 date-tz 라이브러리가 컴파일되며, 
date-tz 라이브러리는 date.lib와 같은 실제 라이브러리 파일을 생성
C:\date\build>cmake -G "Visual Studio 16 2019" -DBUILD_TZ_LIB=ON ..
Could NOT find CURL (missing: CURL_LIBRARY CURL_INCLUDE_DIR)
CURL 라이브러리를 설치
C:\>git clone https://github.com/curl/curl.git
C:\>cd curl
C:\curl>mkdir build
C:\curl>cd build
C:\curl\build>cmake -G "Visual Studio 16 2019" -DCMAKEBUILD_TYPE=Debug ..
visual studio 2019에서 curl.sln 열어서 빌드

- Could NOT find Libssh2 (missing: LIBSSH2_INCLUDE_DIR LIBSSH2_LIBRARY)
Protocols: dict file ftp gopher http imap ipfs ipns ldap ldaps mqtt pop3 rtsp smb smtp telnet tftp
Features: alt-svc AsynchDNS HSTS IPv6 Largefile libz NTLM threadsafe UnixSockets
-- Enabled SSL backends:

https://packages.msys2.org/package/gettext-devel
pacman -S gettext-devel
/usr/share/gettext/archive.dir.tar.xz

nayou@kimnayooung MINGW64 /c/libidn2
# autoreconf -v -i
autoreconf-2.72: export WARNINGS=
autoreconf-2.72: Entering directory '.'
autoreconf-2.72: running: autopoint
autoreconf-2.72: running: aclocal
configure.ac:175: error: '#' is already registered with AC_CONFIG_FILES.
../autoconf-2.72/lib/autoconf/status.m4:289: AC_CONFIG_FILES is expanded from...
configure.ac:175: the top level
autom4te-2.72: error: /usr/bin/m4 failed with exit status: 1
aclocal-1.17: error: /usr/bin/autom4te-2.72 failed with exit status: 1
autoreconf-2.72: error: aclocal failed with exit status: 1
AC_CONFIG_FILES에 동일한 파일이 여러 번 등록되었거나 중복된 파일명이 들어있기 때문
"C:\libidn2\configure.ac" 수정

nayou@kimnayooung MINGW64 /c/libidn2
autoreconf -v -i
nayou@kimnayooung MINGW64 /c/libidn2
# autoreconf -v -i
autoreconf-2.72: export WARNINGS=
autoreconf-2.72: Entering directory '.'
autoreconf-2.72: running: autopoint
autoreconf-2.72: running: aclocal
configure.ac:175: error: '#' is already registered with AC_CONFIG_FILES.
../autoconf-2.72/lib/autoconf/status.m4:289: AC_CONFIG_FILES is expanded from...
configure.ac:175: the top level
autom4te-2.72: error: /usr/bin/m4 failed with exit status: 1
aclocal-1.17: error: /usr/bin/autom4te-2.72 failed with exit status: 1
autoreconf-2.72: error: aclocal failed with exit status: 1

nayou@kimnayooung MINGW64 /c/libidn2
# touch Makefile.am
"C:\libidn2\Makefile.am" 생성됨
파일 생성: 만약 해당 디렉터리에 Makefile.am 파일이 없다면, 
touch Makefile.am 명령어를 실행하면 빈 Makefile.am 파일이 생성
이미 존재하는 파일의 수정 시간이 갱신

각 Makefile.am생성 후 내용을 입력하고 저장한다.
src/Makefile.am:
bin_PROGRAMS = myprogram
myprogram_SOURCES = main.c utils.c
doc/Makefile.am:
dist_doc_DATA = README.md INSTALL.md
tests/Makefile.am:
check_PROGRAMS = test_program
test_program_SOURCES = test_main.c
examples/Makefile.am:
bin_PROGRAMS = example
example_SOURCES = example.c
lib/Makefile.am:
lib_LIBRARIES = libmylib.a
libmylib_a_SOURCES = mylib.c mylib.h
gl/Makefile.am:
include gnulib.mk
fuzz/Makefile.am:
# Include fuzzing related build files here.
po/Makefile.am:
# Include localization related build files here.
nayou@kimnayooung MINGW64 /c/libidn2
# autoreconf -v -i
nayou@kimnayooung MINGW64 /c/libidn2
# autoreconf -v -i
autoreconf-2.72: export WARNINGS=
autoreconf-2.72: Entering directory '.'
autoreconf-2.72: running: autopoint
autoreconf-2.72: running: aclocal -I m4
autoreconf-2.72: configure.ac: tracing
autoreconf-2.72: running: libtoolize --copy
autoreconf-2.72: configure.ac: not using Intltool
autoreconf-2.72: configure.ac: not using Gtkdoc
autoreconf-2.72: running: aclocal -I m4
autoreconf-2.72: running: /usr/bin/autoconf-2.72
autoreconf-2.72: running: /usr/bin/autoheader-2.72
autoreconf-2.72: running: automake --add-missing --copy --no-force
Makefile.am:1: warning: AM_GNU_GETTEXT used but 'po' not in SUBDIRS
Makefile.am:4: error: 'pkgconfig_DATA' is used but 'pkgconfigdir' is undefined
fuzz/Makefile.am:5: error: 'fuzz_PROGRAMS' is used but 'fuzzdir' is undefined
fuzz/Makefile.am:6: warning: variable 'fuzz_test_SOURCES' is defined but no program or
fuzz/Makefile.am:6: library has 'fuzz_test' as canonical name (possible typo)
fuzz/Makefile.am:8: warning: variable 'fuzz_test_LDADD' is defined but no program or
fuzz/Makefile.am:8: library has 'fuzz_test' as canonical name (possible typo)
configure.ac:150: error: required file 'lib/idn2.h.in' not found
autoreconf-2.72: error: automake failed with exit status: 1

c:/libidn2 하위폴더안에 Makefile.am을 모두 만든다
c:/libidn2/Maekfile.am 수정
c:/libidn2/configure.ac 수정
에러)
Makefile.am:1: warning: AM_GNU_GETTEXT used but 'po' not in SUBDIRS
Makefile.am:4: error: 'pkgconfig_DATA' is used but 'pkgconfigdir' is undefined
수정)
# Root 디렉토리의 Makefile.am
# 이 파일은 프로젝트의 최상위 디렉토리에서 Makefile을 설정합니다.

# Include subdirectories Makefile.am
SUBDIRS = gl gnulib lib m4 po src tests tmpwrk2270 unistring build-aux contrib doc examples fuzz gettext-0.19.8 gettext-0.19.8/os2

# Specify the directory for pkg-config files
pkgconfigdir = $(libdir)/pkgconfig
pkgconfig_DATA = libidn2.pc

# Define ACLOCAL_AMFLAGS for additional macros
ACLOCAL_AMFLAGS = -I m4

# Automake options
AM_GNU_GETTEXT([external])
에러)
fuzz/Makefile.am:5: error: 'fuzz_PROGRAMS' is used but 'fuzzdir' is undefined
fuzz/Makefile.am:6: warning: variable 'fuzz_test_SOURCES' is defined but no program or
fuzz/Makefile.am:6: library has 'fuzz_test' as canonical name (possible typo)
fuzz/Makefile.am:8: warning: variable 'fuzz_test_LDADD' is defined but no program or
fuzz/Makefile.am:8: library has 'fuzz_test' as canonical name (possible typo)
수정)
# fuzz 디렉토리의 Makefile.am
# 이 디렉토리에서 fuzz 테스트를 수행할 수 있습니다.

# Define the fuzz test programs
noinst_PROGRAMS = libidn2_to_ascii_8z_fuzzer libidn2_to_unicode_8z8z_fuzzer

# Source files for the fuzz test programs
libidn2_to_ascii_8z_fuzzer_SOURCES = libidn2_to_ascii_8z_fuzzer.c
libidn2_to_unicode_8z8z_fuzzer_SOURCES = libidn2_to_unicode_8z8z_fuzzer.c

# Linker flags for the fuzz test programs
libidn2_to_ascii_8z_fuzzer_LDADD = ../lib/libidn2.la
libidn2_to_unicode_8z8z_fuzzer_LDADD = ../lib/libidn2.la

# Additional files needed for fuzzing
EXTRA_DIST = libidn2_to_ascii_8z_fuzzer.dict libidn2_to_unicode_8z8z_fuzzer.dict README.md run-afl.sh run-clang.sh suppressions.valgrind libidn2_register_fuzzer.in libidn2_to_ascii_8z_fuzzer.in libidn2_to_ascii_8z_fuzzer.repro libidn2_to_unicode_8z8z_fuzzer.in fuzzer.h get_all_corpora get_ossfuzz_corpora libidn2_register_fuzzer.c
에러)
configure.ac:150: error: required file 'lib/idn2.h.in' not found
수정)
'lib/idn2.h.in' 파일을만든다.
에러)
autoreconf-2.72: error: automake failed with exit status: 1

nayou@kimnayooung MINGW64 /c/libidn2
# autoreconf -v -i
autoreconf-2.72: export WARNINGS=
autoreconf-2.72: Entering directory '.'
autoreconf-2.72: running: autopoint
autoreconf-2.72: running: aclocal -I m4
autoreconf-2.72: configure.ac: tracing
autoreconf-2.72: running: libtoolize --copy
autoreconf-2.72: configure.ac: not using Intltool
autoreconf-2.72: configure.ac: not using Gtkdoc
autoreconf-2.72: running: aclocal -I m4
autoreconf-2.72: running: /usr/bin/autoconf-2.72
autoreconf-2.72: running: /usr/bin/autoheader-2.72
autoreconf-2.72: running: automake --add-missing --copy --no-force
autoreconf-2.72: Leaving directory '.'

nayou@kimnayooung MINGW64 /c/libidn2
# automake --version
autoconf --version
automake (GNU automake) 1.17
Features: subsecond-mtime

Copyright (C) 2024 Free Software Foundation, Inc.
License GPLv2+: GNU GPL version 2 or later
  <https://gnu.org/licenses/gpl-2.0.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Tom Tromey <tromey@redhat.com>
       and Alexandre Duret-Lutz <adl@gnu.org>.
autoconf (GNU Autoconf) 2.72
Copyright (C) 2023 Free Software Foundation, Inc.
License GPLv3+/Autoconf: GNU GPL version 3 or later
<https://gnu.org/licenses/gpl.html>, <https://gnu.org/licenses/exceptions.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David J. MacKenzie and Akim Demaille.

configure 스크립트를 실행하여 빌드 시스템을 구성
./configure
(에러)
nayou@kimnayooung MINGW64 /c/libidn2
# ./configure
configure: loading site script /etc/config.site
configure: Libidn2 2.3.7.2-64ab-dirty libidn2 2.3.7 0x02030007 4:0:4 0
checking for a BSD-compatible install... /usr/bin/install -c
checking whether sleep supports fractional seconds... yes
checking filesystem timestamp resolution... 0.01
checking whether build environment is sane... yes
checking for a race-free mkdir -p... /usr/bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking xargs -n works... yes
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.exe
checking for suffix of executables... .exe
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C... yes
checking whether gcc accepts -g... yes
checking for gcc option to enable C11 features... none needed
checking whether gcc understands -c and -o together... yes
checking whether make supports the include directive... yes (GNU style)
checking dependency style of gcc... gcc3
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for wchar.h... yes
checking for minix/config.h... no
checking whether it is safe to define __EXTENSIONS__... yes
checking whether _XOPEN_SOURCE should be defined... no
./configure: line 4950: gl_EARLY: command not found
./configure: line 4951: unistring_EARLY: command not found
checking build system type... x86_64-w64-mingw32
checking host system type... x86_64-w64-mingw32
checking how to print strings... printf
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... C:/msys64/mingw64/x86_64-w64-mingw32/bin/ld.exe
checking if the linker (C:/msys64/mingw64/x86_64-w64-mingw32/bin/ld.exe) is GNU ld... yes
checking for BSD- or MS-compatible name lister (nm)... /mingw64/bin/nm -B
checking the name lister (/mingw64/bin/nm -B) interface... BSD nm
checking whether ln -s works... no, using cp -pR
checking the maximum length of command line arguments... 8192
checking how to convert x86_64-w64-mingw32 file names to x86_64-w64-mingw32 format... func_convert_file_msys_to_w32
checking how to convert x86_64-w64-mingw32 file names to toolchain format... func_convert_file_msys_to_w32
checking for C:/msys64/mingw64/x86_64-w64-mingw32/bin/ld.exe option to reload object files... -r
checking for file... file
checking for objdump... objdump
checking how to recognize dependent libraries... file_magic ^x86 archive import|^x86 DLL
checking for dlltool... dlltool
checking how to associate runtime and link libraries... func_cygming_dll_for_implib
checking for ar... ar
checking for archiver @FILE support... @
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /mingw64/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /usr/bin/dd
checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for dlfcn.h... no
checking for as... as
checking for dlltool... (cached) dlltool
checking for objdump... (cached) objdump
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -DDLL_EXPORT -DPIC
checking if gcc PIC flag -DDLL_EXPORT -DPIC works... yes
checking if gcc static flag -static works... yes
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (C:/msys64/mingw64/x86_64-w64-mingw32/bin/ld.exe) supports shared libraries... yes
checking whether -lc should be explicitly linked in... yes
checking dynamic linker characteristics... Win32 ld.exe
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... yes
./configure: line 13550: gl_INIT: command not found
./configure: line 13551: unistring_INIT: command not found
checking whether NLS is requested... yes
checking for msgfmt... /usr/bin/msgfmt
checking for gmsgfmt... /usr/bin/msgfmt
checking for xgettext... /usr/bin/xgettext
checking for msgmerge... /usr/bin/msgmerge
checking for ld used by gcc... C:/msys64/mingw64/x86_64-w64-mingw32/bin/ld.exe
checking if the linker (C:/msys64/mingw64/x86_64-w64-mingw32/bin/ld.exe) is GNU ld... yes
checking for shared library run path origin... done
checking how to run the C preprocessor... gcc -E
checking for egrep -e... (cached) /usr/bin/grep -E
checking for CFPreferencesCopyAppValue... no
checking for CFLocaleCopyCurrent... no
checking for GNU gettext in libc... no
checking for iconv... yes
checking for working iconv... yes
checking how to link with libiconv... /mingw64/lib/libiconv.dll.a -L/mingw64/lib
checking for GNU gettext in libintl... yes
checking whether to use NLS... yes
checking where the gettext function comes from... external libintl
checking how to link with libintl... /mingw64/lib/libintl.dll.a -L/mingw64/lib
checking whether to build with code coverage support... no
./configure: line 16464: syntax error near unexpected token `-Werror,'
./configure: line 16464: `     gl_WARN_ADD(-Werror, WERROR_CFLAGS)'
(수정)
"C:\libidn2\configure.ac"
# Add warnings 추가
AM_CFLAGS = -Werror

"C:\libidn2\configure"
if test "$enable_gcc_warnings" = error; then
     gl_WARN_ADD(-Werror, WERROR_CFLAGS)
     gl_WARN_ADD(-Wno-error=analyzer-use-of-uninitialized-value, WERROR_CFLAGS)
     gl_WARN_ADD(-Wno-error=missing-field-initializers, WERROR_TESTS_CFLAGS)
     gl_WARN_ADD(-Wno-error=analyzer-double-free, WERROR_TESTS_CFLAGS)
   fi
여기서
gl_WARN_ADD(-Werror, WERROR_CFLAGS) 이부분이 에러
./configure: line 16464: syntax error near unexpected token -Werror,'
./configure: line 16464:      gl_WARN_ADD(-Werror, WERROR_CFLAGS)'
(수정)
if test "$enable_gcc_warnings" = error; then
     #gl_WARN_ADD(-Werror, WERROR_CFLAGS) 주석처리
     # Define gl_WARN_ADD if not defined 추가
     gl_WARN_ADD() {
         echo "Adding warning flags $1 to $2"
         CFLAGS="$CFLAGS $1"
     }
     gl_WARN_ADD(-Wno-error=analyzer-use-of-uninitialized-value, WERROR_CFLAGS)
     gl_WARN_ADD(-Wno-error=missing-field-initializers, WERROR_TESTS_CFLAGS)
     gl_WARN_ADD(-Wno-error=analyzer-double-free, WERROR_TESTS_CFLAGS)
   fi
"C:\libidn2\configure.ac"
# 주석처리
 #   if test "$enable_gcc_warnings" = error; then
 #    gl_WARN_ADD([-Werror], [WERROR_CFLAGS])
 #    gl_WARN_ADD([-Wno-error=analyzer-use-of-uninitialized-value], [WERROR_CFLAGS])
 #    gl_WARN_ADD([-Wno-error=missing-field-initializers], [WERROR_TESTS_CFLAGS])
 #    gl_WARN_ADD([-Wno-error=analyzer-double-free], [WERROR_TESTS_CFLAGS])
 #  fi

#gl_MANYWARN_ALL_GCC([possible_warning_options]) 주석처리

   # 추가
   # Define gl_MANYWARN_ALL_GCC if not defined 
   gl_MANYWARN_ALL_GCC() {
       echo "Adding warning options $1"
       CFLAGS="$CFLAGS $1"
   }

   # 추가
   if test "$enable_gcc_warnings" = error; then
       gl_MANYWARN_ALL_GCC "-Werror"
   fi

   # 추가
   AC_REQUIRE([gl_MANYWARN_ALL_GCC]) 
   AC_PROG_CC 
   AC_PROG_MAKE_SET 

자동화 도구 호출: 매크로 정의와 호출을 추가한 후, autoreconf를 사용하여 변경 사항을 적용
autoreconf -v -i
configure 파일은 configure.ac에서 자동으로 생성

"C:\libidn2\m4\custom-macros.m4" 생성
# custom-macros.m4

# Define gl_MANYWARN_ALL_GCC
gl_MANYWARN_ALL_GCC() {
    echo "Adding warning options $1"
    CFLAGS="$CFLAGS $1"
}

# Define gl_MANYWARN_COMPLEMENT
gl_MANYWARN_COMPLEMENT() {
    echo "Complementing warning options $1 with $2 and excluding $3"
    CFLAGS="$CFLAGS $1"
}

"C:\libidn2\configure.ac"
# 추가
AC_CONFIG_MACRO_DIR([m4])
m4_include([m4/custom-macros.m4])
자동화 도구 호출: 매크로 정의와 호출을 추가한 후, autoreconf를 사용하여 변경 사항을 적용
autoreconf -v -i
#빌드
./configure
nayou@kimnayooung MINGW64 /c/libidn2
# ./configure

checking whether to build with code coverage support... no
checking for CFPreferencesCopyAppValue... no
checking for CFLocaleCopyCurrent... no
checking for GNU gettext in libc... no
checking whether stripping libraries is possible... no
checking for mt... no
checking if : is a manifest tool... no
checking for dlfcn.h... no
./configure: line 4950: gl_EARLY: command not found
./configure: line 4951: unistring_EARLY: command not found
./configure: line 13550: gl_INIT: command not found
./configure: line 13551: unistring_INIT: command not found
./configure: line 13554: AM_CFLAGS: command not found
./configure: line 16474: syntax error near unexpected token \"$desired_warning_options",`
./configure: line 16474: gl_MANYWARN_COMPLEMENT("$desired_warning_options", "$possible_warning_options")

m4/custom-macros.m4 수정
# Define gl_MANYWARN_ALL_GCC
gl_MANYWARN_ALL_GCC() {
    echo "Adding warning options $1"
    CFLAGS="$CFLAGS $1"
}

# Define gl_MANYWARN_COMPLEMENT
gl_MANYWARN_COMPLEMENT() {
    echo "Complementing warning options $1 with $2 and excluding $3"
    CFLAGS="$CFLAGS $1"
    CFLAGS="$CFLAGS $2"
    # Remove $3 from CFLAGS
    CFLAGS=$(echo "$CFLAGS" | sed "s/$3//g")
}

configuer.ac수정
# Define or use gl_MANYWARN_ALL_GCC
    gl_MANYWARN_ALL_GCC "$nw" 

    # Complement and modify warning options 주석처리
    #desired_warning_options="-Werror"
    #possible_warning_options="$nw"
    # Define warning options 추가
    nw="-Wall -Wextra"
    desired_warning_options="-Werror"
    possible_warning_options="$nw"
    remaining_undesired_warning_options="-Wno-unused-parameter"
    # Use gl_MANYWARN_ALL_GCC to add warning options
    gl_MANYWARN_ALL_GCC([$nw])
    # Use gl_MANYWARN_COMPLEMENT to adjust warning options
    gl_MANYWARN_COMPLEMENT([$desired_warning_options], [$possible_warning_options], [$remaining_undesired_warning_options])

    #주석처리
    #gl_MANYWARN_COMPLEMENT("$desired_warning_options", "$possible_warning_options")
    #gl_MANYWARN_COMPLEMENT("$remaining_undesired_warning_options", "$nw")

자동화 도구 호출: 매크로 정의와 호출을 추가한 후, autoreconf를 사용하여 변경 사항을 적용
autoreconf -v -i

autoconf 및 automake 재생성
autoreconf -v -i
nayou@kimnayooung MINGW64 /c/libidn2
# ./configure
configure: loading site script /etc/config.site
configure: Libidn2 2.3.7.2-64ab-dirty libidn2 2.3.7 0x02030007 4:0:4 0
checking for a BSD-compatible install... /usr/bin/install -c
checking whether sleep supports fractional seconds... yes
checking filesystem timestamp resolution... 0.01
checking whether build environment is sane... yes
checking for a race-free mkdir -p... /usr/bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking xargs -n works... yes
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.exe
checking for suffix of executables... .exe
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C... yes
checking whether gcc accepts -g... yes
checking for gcc option to enable C11 features... none needed
checking whether gcc understands -c and -o together... yes
checking whether make supports the include directive... yes (GNU style)
checking dependency style of gcc... gcc3
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for wchar.h... yes
checking for minix/config.h... no
checking whether it is safe to define __EXTENSIONS__... yes
checking whether _XOPEN_SOURCE should be defined... no
./configure: line 4970: gl_EARLY: command not found
./configure: line 4971: unistring_EARLY: command not found
checking build system type... x86_64-w64-mingw32
checking host system type... x86_64-w64-mingw32
checking how to print strings... printf
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... C:/msys64/mingw64/x86_64-w64-mingw32/bin/ld.exe
checking if the linker (C:/msys64/mingw64/x86_64-w64-mingw32/bin/ld.exe) is GNU ld... yes
checking for BSD- or MS-compatible name lister (nm)... /mingw64/bin/nm -B
checking the name lister (/mingw64/bin/nm -B) interface... BSD nm
checking whether ln -s works... no, using cp -pR
checking the maximum length of command line arguments... 8192
checking how to convert x86_64-w64-mingw32 file names to x86_64-w64-mingw32 format... func_convert_file_msys_to_w32
checking how to convert x86_64-w64-mingw32 file names to toolchain format... func_convert_file_msys_to_w32
checking for C:/msys64/mingw64/x86_64-w64-mingw32/bin/ld.exe option to reload object files... -r
checking for file... file
checking for objdump... objdump
checking how to recognize dependent libraries... file_magic ^x86 archive import|^x86 DLL
checking for dlltool... dlltool
checking how to associate runtime and link libraries... func_cygming_dll_for_implib
checking for ar... ar
checking for archiver @FILE support... @
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /mingw64/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /usr/bin/dd
checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for dlfcn.h... no
checking for as... as
checking for dlltool... (cached) dlltool
checking for objdump... (cached) objdump
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -DDLL_EXPORT -DPIC
checking if gcc PIC flag -DDLL_EXPORT -DPIC works... yes
checking if gcc static flag -static works... yes
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (C:/msys64/mingw64/x86_64-w64-mingw32/bin/ld.exe) supports shared libraries... yes
checking whether -lc should be explicitly linked in... yes
checking dynamic linker characteristics... Win32 ld.exe
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... yes
./configure: line 13570: gl_INIT: command not found
./configure: line 13571: unistring_INIT: command not found
./configure: line 13574: AM_CFLAGS: command not found
checking whether NLS is requested... yes
checking for msgfmt... /usr/bin/msgfmt
checking for gmsgfmt... /usr/bin/msgfmt
checking for xgettext... /usr/bin/xgettext
checking for msgmerge... /usr/bin/msgmerge
checking for ld used by gcc... C:/msys64/mingw64/x86_64-w64-mingw32/bin/ld.exe
checking if the linker (C:/msys64/mingw64/x86_64-w64-mingw32/bin/ld.exe) is GNU ld... yes
checking for shared library run path origin... done
checking how to run the C preprocessor... gcc -E
checking for egrep -e... (cached) /usr/bin/grep -E
checking for CFPreferencesCopyAppValue... no
checking for CFLocaleCopyCurrent... no
checking for GNU gettext in libc... no
checking for iconv... yes
checking for working iconv... yes
checking how to link with libiconv... /mingw64/lib/libiconv.dll.a -L/mingw64/lib
checking for GNU gettext in libintl... yes
checking whether to use NLS... yes
checking where the gettext function comes from... external libintl
checking how to link with libintl... /mingw64/lib/libintl.dll.a -L/mingw64/lib
checking whether to build with code coverage support... no
Adding warning options -Wbad-function-cast
Complementing warning options -Werror with -Wall -Wextra and excluding
Complementing warning options  with -Wall -Wextra and excluding
Adding warning option -Werror
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating Makefile
config.status: creating gl/Makefile
config.status: creating doc/Makefile
config.status: creating lib/Makefile
config.status: creating gnulib/lib/unictype/Makefile
config.status: creating gnulib/Makefile
config.status: creating src/Makefile
config.status: creating tests/Makefile
config.status: creating doc/reference/Makefile
config.status: creating examples/Makefile
config.status: creating fuzz/Makefile
config.status: creating gettext-0.19.8/os2/Makefile
config.status: creating po/Makefile
config.status: creating libidn2.pc
config.status: creating po/Makefile.in
config.status: creating lib/idn2.h
config.status: creating config.h
config.status: executing depfiles commands
config.status: executing libtool commands
config.status: executing po-directories commands
config.status: creating po/POTFILES
config.status: creating po/Makefile
config.status: executing post-configure commands
chmod: cannot access 'misc/gettextize': No such file or directory
chmod: cannot access 'misc/autopoint': No such file or directory
chmod: cannot access 'misc/convert-archive': No such file or directory
./config.status: line 2199: FIX_MAKEFILE_DISTRIB: command not found
configure: summary of main build options:

  Version:            2.3.7.2-64ab-dirty
  Libtool version     4:0:4
  DLL version:        0
  Header version:     major 2 minor 3 patch 7 number 0x02030007
  Build system:       x86_64-w64-mingw32
  Host/Target system: x86_64-w64-mingw32
  Install prefix:     /mingw64
  Compiler:           gcc
  CFLAGS:             -g -O2 -Wbad-function-cast -Werror  -Werror
  CPPFLAGS:           -I/mingw64/include
  LDFLAGS:
  Library types:      Shared=yes, Static=yes

  Warning flags:
      WERROR_CFLAGS:
WERROR_TESTS_CFLAGS:
        WARN_CFLAGS:

  Documentation:      yes

  nl_langinfo:
  Libiconv:
         LTLIBICONV:  -L/mingw64/lib -liconv -R/mingw64/lib
  Libunistring:
            VERSION:
     LTLIBUNISTRING:

  Version script:

  Valgrind:
경고와 오류 메시지가 있지만, configure 과정 자체는 성공적으로 완료
나머지오류만해결하면됨

