1. qt-online-installer-windows-x64-4.8.0.exe 설치

#include <iostream>
#include <string>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <opencv2/opencv.hpp>
#include <QtWidgets/QApplication>
#include <QtWidgets/QMainWindow>
#include <QtWidgets/QFileDialog>
#include <QtWidgets/QPushButton>
#include <QtWidgets/QLabel>
#include <QtWidgets/QVBoxLayout>
#include <QtGui/QImage>
#include <QtCore/QThread>

// 이미지 클래스
class Image : public QObject {
    Q_OBJECT

public:
    explicit Image(QObject* parent = nullptr) : QObject(parent) {}

    // 이미지 로드
    void loadImage(const std::string& filename) {
        image = cv::imread(filename);
        emit imageLoaded(image.empty() ? nullptr : &image);
    }

    // 필터 적용
    void applyFilter(const cv::Mat& filter) {
        if (!image.empty()) {
            cv::Mat result;
            cv::filter2D(image, result, -1, filter);
            emit filterApplied(result);
        }
    }

    // 이미지 저장
    void saveImage(const std::string& filename) {
        if (!image.empty()) {
            cv::imwrite(filename, image);
            emit imageSaved();
        }
    }

signals:
    void imageLoaded(const cv::Mat* image);
    void filterApplied(const cv::Mat& result);
    void imageSaved();

private:
    cv::Mat image;
};

// GUI 윈도우 클래스
class MainWindow : public QMainWindow {
    Q_OBJECT

public:
    MainWindow(QWidget* parent = nullptr) : QMainWindow(parent) {
        setWindowTitle("Image Processor");

        // 버튼 및 라벨 초기화
        loadButton = new QPushButton("Load Image", this);
        connect(loadButton, &QPushButton::clicked, this, &MainWindow::loadImage);

        applyButton = new QPushButton("Apply Filter", this);
        connect(applyButton, &QPushButton::clicked, this, &MainWindow::applyFilter);

        saveButton = new QPushButton("Save Image", this);
        connect(saveButton, &QPushButton::clicked, this, &MainWindow::saveImage);

        imageLabel = new QLabel(this);
        imageLabel->setScaledContents(true);

        QVBoxLayout* layout = new QVBoxLayout;
        layout->addWidget(loadButton);
        layout->addWidget(applyButton);
        layout->addWidget(saveButton);
        layout->addWidget(imageLabel);

        QWidget* centralWidget = new QWidget(this);
        centralWidget->setLayout(layout);
        setCentralWidget(centralWidget);

        // 이미지 객체 초기화
        image = new Image(this);
        connect(image, &Image::imageLoaded, this, &MainWindow::displayImage);
        connect(image, &Image::filterApplied, this, &MainWindow::displayImage);
        connect(image, &Image::imageSaved, this, &MainWindow::imageSaved);
    }

private slots:
    // 이미지 로드
    void loadImage() {
        QString filename = QFileDialog::getOpenFileName(this, tr("Open Image"), "", tr("Image Files (*.png *.jpg *.bmp)"));
        if (!filename.isEmpty()) {
            std::string file = filename.toStdString();
            image->loadImage(file);
        }
    }

    // 필터 적용
    void applyFilter() {
        if (!image->isNull()) {
            // 필터 생성 (예시: 그레이스케일)
            cv::Mat filter = (cv::Mat_<float>(3, 3) << 0, -1, 0, -1, 5, -1, 0, -1, 0);
            image->applyFilter(filter);
        }
    }

    // 이미지 저장
    void saveImage() {
        QString filename = QFileDialog::getSaveFileName(this, tr("Save Image"), "", tr("Image Files (*.png *.jpg *.bmp)"));
        if (!filename.isEmpty()) {
            std::string file = filename.toStdString();
            image->saveImage(file);
        }
    }

    // 이미지 표시
    void displayImage(const cv::Mat* img) {
        if (img) {
            QImage qImg(img->data, img->cols, img->rows, img->step, QImage::Format_RGB888);
            imageLabel->setPixmap(QPixmap::fromImage(qImg));
        }
        else {
            imageLabel->clear();
        }
    }

    // 이미지 저장 완료 메시지 표시
    void imageSaved() {
        std::cout << "Image saved successfully." << std::endl;
    }

private:
    QPushButton* loadButton;
    QPushButton* applyButton;
    QPushButton* saveButton;
    QLabel* imageLabel;
    Image* image;
};

int main(int argc, char* argv[]) {
    QApplication app(argc, argv);
    MainWindow window;
    window.resize(800, 600);
    window.show();
    return app.exec();
}

#include "main.moc"
