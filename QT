
1. qt-online-installer-windows-x64-4.8.0.exe 설치
2. Custom Installation > 6.7.1 선택
3. Visual studio > 확장 > 확장관리 > qt검색 > Qt visual Studio Tools 설치
4. 도구 > 옵션 > qt version > "C:\Qt\6.7.1\msvc2019_64\bin\qmake.exe" 등록
5. CMakeLists.txt (이미지처리를 구현할것으므로 OpenCV설정도 같이해준다) 
cmake_minimum_required(VERSION 3.14)
project(Project7)

# Qt 설정
set(CMAKE_PREFIX_PATH "C:/Qt/6.7.1/msvc2019_64")

find_package(Qt6 REQUIRED COMPONENTS Widgets Core Gui)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

# OpenCV 설정
set(OpenCV_DIR "C:/opencv/build")
find_package(OpenCV REQUIRED)

# 실행 파일 추가
add_executable(Project7 main.cpp)

# Qt 라이브러리 링크
target_link_libraries(Project7 Qt6::Widgets Qt6::Core Qt6::Gui)

# OpenCV 라이브러리 링크
target_link_libraries(Project7 ${OpenCV_LIBS})

# 실행 파일 출력 디렉토리 설정
set_target_properties(Project7 PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/Debug"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/Release"
)

# Debug 및 Release 구성에 맞는 OpenCV DLL 복사 스크립트
add_custom_command(TARGET Project7 POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "${OpenCV_DIR}/x64/vc16/bin/opencv_world490${CMAKE_BUILD_TYPE}.dll"
    $<TARGET_FILE_DIR:Project7>
)

6.PowerShell에서 빌드
cd C:\myLab\Project7\Project7
mkdir build2
cd build2
cmake -G "Visual Studio 17 2022" ..

7. "C:\myLab\Project7\Project7\build2\Project7.sln"솔션을
열고 프로젝트를 시작프로그램으로 설정한 후 실행!

<간단한 샤프닝필터 이미지 프로세싱 프로그램>
-중앙 픽셀을 강조하고 주변 픽셀의 값에 가중치를 부여하여 이미지의 경계를 뚜렷하게 함
-경계 검출이나 이미지의 엣지를 강조하는데 사용된다. 
-이미지의 세부 사항을 부각시키고 시각적으로 뚜렷하게 만들어준다.
-사진을 개선하거나 선명도를 높이는데 사용될 수 있다. 
-메뉴 : Load Image, Apply Filter, Save Image
-신호-슬롯 매터니즘을 사용하여 버튼 클릭 이벤트를 처리하고, 이미지가 로드 되거나
필터가 적용될 때 UI를 업데이트 한다.
//main.cpp
#include <QApplication> 
#include <QFileDialog> 
#include <QImage>
#include <QLabel>
#include <QPushButton>
#include <QVBoxLayout>
#include <QObject>
#include <opencv2/opencv.hpp> //이미지 처리와 컴퓨터 비전에 사용

//이미지 로드, 필터 적용, 저장 기능을 제공하는 클래스
//QObject상속받아 Qt의 신호-슬롯 메터니즘을 사용할 수 있게 한다.
class ImageProcessor : public QObject { 
    Q_OBJECT //매크로

public:
    //암시적 형변환 허용안함
    explicit ImageProcessor(QObject* parent = nullptr) : QObject(parent) {}

//Qt슬롯 함수 정의, 보통 이벤트나 시그널을 받아서 특정 작업을 수행하는 함수
public slots:
    //이미지를 로드하는 작업 담당
    void loadImage(const QString& filename) {
        //OpenCV사용
        cv::Mat img = cv::imread(filename.toStdString());
        if (!img.empty()) {
            image = img.clone(); //이미지복제
            cv::cvtColor(img, img, cv::COLOR_BGR2RGB);
            //RGB색상을 8비트로 표현하는 형식 사용
            QImage qImg(img.data, img.cols, img.rows, img.step, QImage::Format_RGB888);
            //imageLoaded 시그널 발생. 이 시그널을 받는 곳에서 이미지를 화면에 표시
            emit imageLoaded(qImg); 
        }
    }
    //이미지에 필터를 적용하고, 그 결과를 QImage형식으로 변환하여
    //filterApplied 시그널을 발생시키는 역할을 한다.
    void applyFilter() {
        if (image.empty()) return;

        cv::Mat result; //결과 이미지를 저장할 변수를 선언
        //이미지를 강화하는 역할을 함
        cv::Mat filter = (cv::Mat_<float>(3, 3) << 0, -1, 0, -1, 5, -1, 0, -1, 0);
        //OpenCV의 filter2D함수를 사용하여 이미지에 필터 적용
        //필터 깊이 -1, 사용할 필터
        cv::filter2D(image, result, -1, filter);
        //Qt에서 사용되는 형식에 맞추기 위해서
        cv::cvtColor(result, result, cv::COLOR_BGR2RGB);
        QImage qImg(result.data, result.cols, result.rows, result.step, QImage::Format_RGB888);
        //filterApplied 시그널을 발생시켜 필터가 적용된 이미지를 전달한다.
        //이 시그널을 받는 곳에서는 이미지를 화면에 표시하거나 다른 작업을 수행
        //할 수 있다.
        emit filterApplied(qImg);
    }

    void saveImage(const QString& filename) {
        if (image.empty()) return;
        cv::imwrite(filename.toStdString(), image);
        //imageSaved시그널을 발생시킨다.
        emit imageSaved();
    }

signals:
    void imageLoaded(const QImage& image);
    void filterApplied(const QImage& image);
    void imageSaved();

private:
    cv::Mat image;
};

//Qt를 사용하여 GUI를 구성하고 이미지 처리를 수행하는 간단한 애플리케이션
int main(int argc, char* argv[]) {
    QApplication app(argc, argv); //애플리케이션의 진입점

    QWidget window; //주 창을 나타내는 QWidget객체를 생성
    window.setWindowTitle("Image Processor");

    QPushButton loadButton("Load Image");
    QPushButton applyButton("Apply Filter");
    QPushButton saveButton("Save Image");
    QLabel imageLabel;

    QVBoxLayout layout;
    layout.addWidget(&loadButton);
    layout.addWidget(&applyButton);
    layout.addWidget(&saveButton);
    layout.addWidget(&imageLabel);

    ImageProcessor imageProcessor;

    //버튼 클릭 시그널과 ImageProcessor클래스의 슬롯함수 연결
    QObject::connect(&loadButton, &QPushButton::clicked, [&]() {
        QString filename = QFileDialog::getOpenFileName(&window, "Open Image", "", "Image Files (*.png *.jpg *.bmp)");
        if (!filename.isEmpty()) {
            imageProcessor.loadImage(filename);
        }
        });

    QObject::connect(&applyButton, &QPushButton::clicked, [&]() {
        imageProcessor.applyFilter();
        });

    QObject::connect(&saveButton, &QPushButton::clicked, [&]() {
        QString filename = QFileDialog::getSaveFileName(&window, "Save Image", "", "Image Files (*.png *.jpg *.bmp)");
        if (!filename.isEmpty()) {
            imageProcessor.saveImage(filename);
        }
        });

    QObject::connect(&imageProcessor, &ImageProcessor::imageLoaded, [&](const QImage& image) {
        imageLabel.setPixmap(QPixmap::fromImage(image));
        });

    QObject::connect(&imageProcessor, &ImageProcessor::filterApplied, [&](const QImage& image) {
        imageLabel.setPixmap(QPixmap::fromImage(image));
        });

    window.setLayout(&layout);
    window.show();

    return app.exec();
}

#include "main.moc"

<용어>
-슬롯(Slot)
특정한 이벤트나 동작을 수행하는 함수를 가리킨다. Qt에서는 슬롯을 사용하여 특정 이벤트
(예:버튼 클릭)가 발생했을 때 실행되는 함수를 정의한다.
버튼을 클릭했을 때 이미지를 로드하는 기능을 하는 함수

-시그널(Signal)
객체의 상태 변화나 사용자 액션과 같은 이벤트를 나타내는 신호이다.
Qt에서는 이벤트가 발생했을 때 시그널이 발생하고, 이를 연결된 슬롯에 전달하여 특정
동작을 수행한다.
버튼이 클릭되었을 때 클릭 이벤트를 나타내는 시그널 발생 

-MOC(Meta Object Compiler)
Qt에서 Object를 상속하는 클래스에는 시그널 및 슬롯, 다이나믹 프로퍼티 등의 특별한
능이 있다. 이러한 기능들은 MOC에 의해 처리된다. MOC는 헤더 파일을 분석하여 Qt의
메타 오븍젝트 시스템을 사용하는 클래스에 대한 코드를 생성한다. 이 코드는 .moc파일
로 저장되며, 일반적으로 .cpp파일이 있는 디렉토리에 위치한다.
set(CMAKE_AUTOMOC ON)
#include "main.moc"은 MOC에 의해 생성된 메타 오브젝트 코드를 현재 소스파일에
포함시키는 역할을 한다. 이렇게 함으로써 Qt의 메타 오브젝트 시스템이 올바르게 작동하고
Object를 상속하는 클래스의 추가된 기능을 사용할 수 있다.

<간단한 클릭이벤트 프로그램>

1. 프로젝트를 새로만든다.

2. main.cpp를 소스파일에 새로만든다.
C:\myLab\Project8\Project8
Project8/
├── build/
├── CMakeLists.txt
└── main.cpp

3. CMakeLists.txt
# CMake의 최소 버전 지정
cmake_minimum_required(VERSION 3.14)

# 프로젝트 이름 설정
project(Project8)

# Qt 설정
# Qt의 설치된 경로를 지정합니다.
set(CMAKE_PREFIX_PATH "C:/Qt/6.7.1/msvc2019_64")

# Qt의 필요한 컴포넌트(Widgets, Core, Gui)를 찾습니다.
find_package(Qt6 REQUIRED COMPONENTS Widgets Core Gui)

# Qt의 자동 MOC, UIC, RCC 기능을 활성화합니다.
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

# 실행 파일 추가
# 프로젝트의 실행 파일(main.cpp로부터)을 생성합니다.
add_executable(Project8 main.cpp)

# Qt 라이브러리 링크
# Qt 라이브러리(Widgets, Core, Gui)를 프로젝트에 링크합니다.
target_link_libraries(Project8 Qt6::Widgets Qt6::Core Qt6::Gui)

4. CMake 빌드
cd C:\myLab\Project8\Project8
mkdir build
cd build
cmake ..
cmake --build .

5. 생성된 솔루션파일을 연다.
"C:\myLab\Project8\Project8\build\Project8.sln"

6. 실행
-버튼을 누르면 실행터미널에 Hello, Qt!가 출력된다.
//main.cpp
#include <QApplication>
#include <QPushButton>

int main(int argc, char* argv[]) {
    QApplication app(argc, argv);

    // 버튼 생성
    QPushButton button("Click me!");

    // 버튼에 대한 이벤트 핸들러 설정
    QObject::connect(&button, &QPushButton::clicked, [&]() {
        qDebug() << "Hello, Qt!";
        });

    // 윈도우에 버튼 추가
    button.show();

    // 어플리케이션 실행
    return app.exec();
}

<visual studio 2022에서 ui파일 적용하기>
1. 프로젝트 루트에 main.ui파일 넣기
"C:\myLab\Project8\Project8\main.ui"
2. 터미널에서 main.ui.h만들기
uic main.ui -o main.ui.h
3. include 하기
#include "main.ui.h"
4. 실행하기
//main.cpp
#include <qapplication>
#include "main.ui.h"

int main(int argc, char* argv[])
{
    QApplication app(argc, argv);
    QMainWindow mainWindow;
    Ui::MainWindow ui;
    ui.setupUi(&mainWindow);
    mainWindow.show();
    return app.exec();
}

5. 버튼추가하기
-main.ui를 QT Creator로 열고 pushButton_2를 추가합니다.
-저장하고 터미널에서 main.ui.h 생성
-소스 수정 후 실행!
#include <QApplication>
#include <QMainWindow>
#include <QMessageBox>
#include "main.ui.h" //Qt디자이너로 만든 UI파일에서 자동 생성된 헤더 파일을 포함
                     //이 파일에는 UI요소에 대한 정의가 포함되어 있다.
int main(int argc, char* argv[])
{
    QApplication app(argc, argv);
    QMainWindow mainWindow;
    Ui::MainWindow ui;
    ui.setupUi(&mainWindow);

    // 버튼 클릭 시 알림창을 띄우는 슬롯을 연결합니다.
    QObject::connect(ui.pushButton, &QPushButton::clicked, [&]() {
        QMessageBox::information(&mainWindow, "Notification", "Button Clicked!");
        });

    // 추가한 버튼 클릭 시 알림창을 띄우는 슬롯을 연결합니다.
    QObject::connect(ui.pushButton_2, &QPushButton::clicked, [&]() {
        QMessageBox::information(&mainWindow, "Notification", "Button Clicked!");
        });

    mainWindow.show(); //메인 윈도우를 화면에 표시
    return app.exec(); //애플리케이션의 이벤트 루프 시
}
